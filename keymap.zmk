
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Engrammer 0
#define LAYER_Engram 1
#define LAYER_Dvorak 2
#define LAYER_Workman 3
#define LAYER_Colemak 4
#define LAYER_QWERTY 5
#define LAYER_Lower 6
#define LAYER_Typing 7
#define LAYER_LeftPinky 8
#define LAYER_LeftRing1 9
#define LAYER_LeftRing2 10
#define LAYER_LeftMiddy 11
#define LAYER_LeftIndex 12
#define LAYER_RightPinky 13
#define LAYER_RightRing1 14
#define LAYER_RightRing2 15
#define LAYER_RightMiddy 16
#define LAYER_RightIndex 17
#define LAYER_Cursor 18
#define LAYER_Number 19
#define LAYER_Function 20
#define LAYER_Emoji 21
#define LAYER_Symbol 22
#define LAYER_Mouse 23
#define LAYER_System 24
#define LAYER_World 25
#define LAYER_Gaming 26
#define LAYER_Magic 27

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    #define ENFORCE_BILATERAL 
#ifndef OPERATING_SYSTEM
#define OPERATING_SYSTEM 1 
#endif
#if OPERATING_SYSTEM == 2
#define _C LG
#define _REDO _C(LS(Z))
#define _POWER K_POWER
#define _W LA
#define _HOME _C(LEFT)
#define _END _C(RIGHT)
#else
#define _C LC
#define _REDO _C(Y)
#define _POWER C_POWER
#define _W _C
#define _HOME HOME
#define _END END
#endif
#define _SLEEP C_SLEEP
#if OPERATING_SYSTEM == 3
#define _LOCK LG(L)
#elif OPERATING_SYSTEM == 2
#define _LOCK _C(LC(Q))
#elif OPERATING_SYSTEM == 1
#define _LOCK K_LOCK
#endif
#define _UNDO _C(Z)
#define _CUT _C(X)
#define _COPY _C(C)
#define _PASTE _C(V)
#define _FIND _C(F)
#define _FIND_NEXT _C(G)
#define _FIND_PREV _C(LS(G))
#define AMPS LS(N7)
#define AT LS(N2)
#define CARET LS(N6)
#define COLON LS(SEMI)
#define DLLR LS(N4)
#define DQT LS(SQT)
#define EXCL LS(N1)
#define GT LS(DOT)
#define HASH LS(N3)
#define LBRC LS(LBKT)
#define LPAR LS(N9)
#define LT LS(COMMA)
#define PIPE LS(BSLH)
#define PLUS LS(EQUAL)
#define PRCNT LS(N5)
#define QMARK LS(FSLH)
#define RBRC LS(RBKT)
#define RPAR LS(N0)
#define STAR LS(N8)
#define TILDE LS(GRAVE)
#define UNDER LS(MINUS)
#if LAYER_Engrammer == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 B
#define KEY_LH_C4R3 Y
#define MOD_LH_C4R3 RALT
#define KEY_LH_C3R3 O
#define KEY_LH_C2R3 U
#define KEY_LH_C1R3 SQT
#define KEY_RH_C1R3 SEMI
#define KEY_RH_C2R3 L
#define KEY_RH_C3R3 D
#define KEY_RH_C4R3 W
#define MOD_RH_C4R3 RALT
#define KEY_RH_C5R3 V
#define KEY_RH_C6R3 Z
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 C
#define MOD_LH_C5R4 LGUI
#define KEY_LH_C4R4 I
#define MOD_LH_C4R4 LALT
#define KEY_LH_C3R4 E
#define MOD_LH_C3R4 LCTL
#define KEY_LH_C2R4 A
#define MOD_LH_C2R4 LSFT
#define KEY_LH_C1R4 COMMA
#define KEY_RH_C1R4 DOT
#define KEY_RH_C2R4 H
#define MOD_RH_C2R4 LSFT
#define KEY_RH_C3R4 T
#define MOD_RH_C3R4 LCTL
#define KEY_RH_C4R4 S
#define MOD_RH_C4R4 LALT
#define KEY_RH_C5R4 N
#define MOD_RH_C5R4 LGUI
#define KEY_RH_C6R4 Q
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 G
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 J
#define KEY_LH_C2R5 K
#define KEY_LH_C1R5 MINUS
#define KEY_RH_C1R5 FSLH
#define KEY_RH_C2R5 R
#define KEY_RH_C3R5 M
#define KEY_RH_C4R5 F
#define KEY_RH_C5R5 P
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if LAYER_Engram == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 LBKT
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 RBKT
#define KEY_LH_C6R3 AT
#define KEY_LH_C5R3 B
#define KEY_LH_C4R3 Y
#define MOD_LH_C4R3 RALT
#define KEY_LH_C3R3 O
#define KEY_LH_C2R3 U
#define KEY_LH_C1R3 SQT
#define KEY_RH_C1R3 DQT
#define KEY_RH_C2R3 L
#define KEY_RH_C3R3 D
#define KEY_RH_C4R3 W
#define MOD_RH_C4R3 RALT
#define KEY_RH_C5R3 V
#define KEY_RH_C6R3 Z
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 C
#define MOD_LH_C5R4 LGUI
#define KEY_LH_C4R4 I
#define MOD_LH_C4R4 LALT
#define KEY_LH_C3R4 E
#define MOD_LH_C3R4 LCTL
#define KEY_LH_C2R4 A
#define MOD_LH_C2R4 LSFT
#define KEY_LH_C1R4 COMMA
#define KEY_RH_C1R4 DOT
#define KEY_RH_C2R4 H
#define MOD_RH_C2R4 LSFT
#define KEY_RH_C3R4 T
#define MOD_RH_C3R4 LCTL
#define KEY_RH_C4R4 S
#define MOD_RH_C4R4 LALT
#define KEY_RH_C5R4 N
#define MOD_RH_C5R4 LGUI
#define KEY_RH_C6R4 Q
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 G
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 J
#define KEY_LH_C2R5 K
#define KEY_LH_C1R5 MINUS
#define KEY_RH_C1R5 QMARK
#define KEY_RH_C2R5 R
#define KEY_RH_C3R5 M
#define KEY_RH_C4R5 F
#define KEY_RH_C5R5 P
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 HASH
#define KEY_RH_C4R6 FSLH
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if LAYER_Dvorak == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 SQT
#define KEY_LH_C4R3 COMMA
#define MOD_LH_C4R3 RALT
#define KEY_LH_C3R3 DOT
#define KEY_LH_C2R3 P
#define KEY_LH_C1R3 Y
#define KEY_RH_C1R3 F
#define KEY_RH_C2R3 G
#define KEY_RH_C3R3 C
#define KEY_RH_C4R3 R
#define MOD_RH_C4R3 RALT
#define KEY_RH_C5R3 L
#define KEY_RH_C6R3 SLASH
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 A
#define MOD_LH_C5R4 LGUI
#define KEY_LH_C4R4 O
#define MOD_LH_C4R4 LALT
#define KEY_LH_C3R4 E
#define MOD_LH_C3R4 LCTL
#define KEY_LH_C2R4 U
#define MOD_LH_C2R4 LSFT
#define KEY_LH_C1R4 I
#define KEY_RH_C1R4 D
#define KEY_RH_C2R4 H
#define MOD_RH_C2R4 LSFT
#define KEY_RH_C3R4 T
#define MOD_RH_C3R4 LCTL
#define KEY_RH_C4R4 N
#define MOD_RH_C4R4 LALT
#define KEY_RH_C5R4 S
#define MOD_RH_C5R4 LGUI
#define KEY_RH_C6R4 MINUS
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 SEMI
#define KEY_LH_C4R5 Q
#define KEY_LH_C3R5 J
#define KEY_LH_C2R5 K
#define KEY_LH_C1R5 X
#define KEY_RH_C1R5 B
#define KEY_RH_C2R5 M
#define KEY_RH_C3R5 W
#define KEY_RH_C4R5 V
#define KEY_RH_C5R5 Z
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if LAYER_Workman == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 Q
#define KEY_LH_C4R3 D
#define MOD_LH_C4R3 RALT
#define KEY_LH_C3R3 R
#define KEY_LH_C2R3 W
#define KEY_LH_C1R3 B
#define KEY_RH_C1R3 J
#define KEY_RH_C2R3 F
#define KEY_RH_C3R3 U
#define KEY_RH_C4R3 P
#define MOD_RH_C4R3 RALT
#define KEY_RH_C5R3 SEMI
#define KEY_RH_C6R3 MINUS
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 A
#define MOD_LH_C5R4 LGUI
#define KEY_LH_C4R4 S
#define MOD_LH_C4R4 LALT
#define KEY_LH_C3R4 H
#define MOD_LH_C3R4 LCTL
#define KEY_LH_C2R4 T
#define MOD_LH_C2R4 LSFT
#define KEY_LH_C1R4 G
#define KEY_RH_C1R4 Y
#define KEY_RH_C2R4 N
#define MOD_RH_C2R4 LSFT
#define KEY_RH_C3R4 E
#define MOD_RH_C3R4 LCTL
#define KEY_RH_C4R4 O
#define MOD_RH_C4R4 LALT
#define KEY_RH_C5R4 I
#define MOD_RH_C5R4 LGUI
#define KEY_RH_C6R4 SQT
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 Z
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 M
#define KEY_LH_C2R5 C
#define KEY_LH_C1R5 V
#define KEY_RH_C1R5 K
#define KEY_RH_C2R5 L
#define KEY_RH_C3R5 COMMA
#define KEY_RH_C4R5 DOT
#define KEY_RH_C5R5 FSLH
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if LAYER_Colemak == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 Q
#define KEY_LH_C4R3 W
#define MOD_LH_C4R3 RALT
#define KEY_LH_C3R3 F
#define KEY_LH_C2R3 P
#define KEY_LH_C1R3 G
#define KEY_RH_C1R3 J
#define KEY_RH_C2R3 L
#define KEY_RH_C3R3 U
#define KEY_RH_C4R3 Y
#define MOD_RH_C4R3 RALT
#define KEY_RH_C5R3 SEMI
#define KEY_RH_C6R3 MINUS
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 A
#define MOD_LH_C5R4 LGUI
#define KEY_LH_C4R4 R
#define MOD_LH_C4R4 LALT
#define KEY_LH_C3R4 S
#define MOD_LH_C3R4 LCTL
#define KEY_LH_C2R4 T
#define MOD_LH_C2R4 LSFT
#define KEY_LH_C1R4 D
#define KEY_RH_C1R4 H
#define KEY_RH_C2R4 N
#define MOD_RH_C2R4 LSFT
#define KEY_RH_C3R4 E
#define MOD_RH_C3R4 LCTL
#define KEY_RH_C4R4 I
#define MOD_RH_C4R4 LALT
#define KEY_RH_C5R4 O
#define MOD_RH_C5R4 LGUI
#define KEY_RH_C6R4 SQT
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 Z
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 C
#define KEY_LH_C2R5 V
#define KEY_LH_C1R5 B
#define KEY_RH_C1R5 K
#define KEY_RH_C2R5 M
#define KEY_RH_C3R5 COMMA
#define KEY_RH_C4R5 DOT
#define KEY_RH_C5R5 FSLH
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if LAYER_QWERTY == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 Q
#define KEY_LH_C4R3 W
#define MOD_LH_C4R3 RALT
#define KEY_LH_C3R3 E
#define KEY_LH_C2R3 R
#define KEY_LH_C1R3 T
#define KEY_RH_C1R3 Y
#define KEY_RH_C2R3 U
#define KEY_RH_C3R3 I
#define KEY_RH_C4R3 O
#define MOD_RH_C4R3 RALT
#define KEY_RH_C5R3 P
#define KEY_RH_C6R3 MINUS
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 A
#define MOD_LH_C5R4 LGUI
#define KEY_LH_C4R4 S
#define MOD_LH_C4R4 LALT
#define KEY_LH_C3R4 D
#define MOD_LH_C3R4 LCTL
#define KEY_LH_C2R4 F
#define MOD_LH_C2R4 LSFT
#define KEY_LH_C1R4 G
#define KEY_RH_C1R4 H
#define KEY_RH_C2R4 J
#define MOD_RH_C2R4 LSFT
#define KEY_RH_C3R4 K
#define MOD_RH_C3R4 LCTL
#define KEY_RH_C4R4 L
#define MOD_RH_C4R4 LALT
#define KEY_RH_C5R4 SEMI
#define MOD_RH_C5R4 LGUI
#define KEY_RH_C6R4 SQT
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 Z
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 C
#define KEY_LH_C2R5 V
#define KEY_LH_C1R5 B
#define KEY_RH_C1R5 N
#define KEY_RH_C2R5 M
#define KEY_RH_C3R5 COMMA
#define KEY_RH_C4R5 DOT
#define KEY_RH_C5R5 FSLH
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
behaviors {
#ifndef HOMEY_HOLDING_TYPE
#define HOMEY_HOLDING_TYPE "tap-preferred"
#endif
#ifndef HOMEY_HOLDING_TIME
#define HOMEY_HOLDING_TIME 270 
#endif
#ifndef HOMEY_STREAK_DECAY
#define HOMEY_STREAK_DECAY 230
#endif
#ifndef HOMEY_REPEAT_DECAY
#define HOMEY_REPEAT_DECAY 300 
#endif
#ifndef CHORD_HOLDING_TYPE
#define CHORD_HOLDING_TYPE "tap-preferred"
#endif
#ifndef CHORD_HOLDING_TIME
#define CHORD_HOLDING_TIME 150
#endif
#ifndef CHORD_STREAK_DECAY
#define CHORD_STREAK_DECAY 230
#endif
#ifndef CHORD_REPEAT_DECAY
#define CHORD_REPEAT_DECAY 300 
#endif
#ifndef INDEX_HOLDING_TYPE
#define INDEX_HOLDING_TYPE "tap-preferred"
#endif
#ifndef INDEX_HOLDING_TIME
#define INDEX_HOLDING_TIME 170
#endif
#ifndef INDEX_STREAK_DECAY
#define INDEX_STREAK_DECAY 100
#endif
#ifndef INDEX_REPEAT_DECAY
#define INDEX_REPEAT_DECAY 300 
#endif
#ifndef PLAIN_HOLDING_TYPE
#define PLAIN_HOLDING_TYPE INDEX_HOLDING_TYPE
#endif
#ifndef PLAIN_HOLDING_TIME
#define PLAIN_HOLDING_TIME INDEX_HOLDING_TIME
#endif
#ifndef PLAIN_STREAK_DECAY
#define PLAIN_STREAK_DECAY INDEX_STREAK_DECAY
#endif
#ifndef THUMB_HOLDING_TYPE
#define THUMB_HOLDING_TYPE "balanced"
#endif
#ifndef THUMB_HOLDING_TIME
#define THUMB_HOLDING_TIME 200
#endif
#ifndef THUMB_REPEAT_DECAY
#define THUMB_REPEAT_DECAY 300 
#endif
#ifndef SPACE_HOLDING_TYPE
#define SPACE_HOLDING_TYPE "balanced"
#endif
#ifndef SPACE_HOLDING_TIME
#define SPACE_HOLDING_TIME 200
#endif
#ifndef SPACE_REPEAT_DECAY
#define SPACE_REPEAT_DECAY 300 
#endif
#define LEFT_HAND_KEYS \
0 1 2 3 4 \
10 11 12 13 14 15 \
22 23 24 25 26 27 \
34 35 36 37 38 39 \
46 47 48 49 50 51 \
64 65 66 67 68
#define RIGHT_HAND_KEYS \
5 6 7 8 9 \
16 17 18 19 20 21 \
28 29 30 31 32 33 \
40 41 42 43 44 45 \
58 59 60 61 62 63 \
75 76 77 78 79
#define THUMB_KEYS \
69 52 57 74 \
70 53 56 73 \
71 54 55 72
#define LEFT_PINKY_KEY KEY_LH_C5R4
#define LEFT_RING1_KEY KEY_LH_C4R4
#define LEFT_RING2_KEY KEY_LH_C4R3
#define LEFT_MIDDY_KEY KEY_LH_C3R4
#define LEFT_INDEX_KEY KEY_LH_C2R4
#define LEFT_PINKY_MOD MOD_LH_C5R4
#define LEFT_RING1_MOD MOD_LH_C4R4
#define LEFT_RING2_MOD MOD_LH_C4R3
#define LEFT_MIDDY_MOD MOD_LH_C3R4
#define LEFT_INDEX_MOD MOD_LH_C2R4
#define RIGHT_PINKY_KEY KEY_RH_C5R4
#define RIGHT_RING1_KEY KEY_RH_C4R4
#define RIGHT_RING2_KEY KEY_RH_C4R3
#define RIGHT_MIDDY_KEY KEY_RH_C3R4
#define RIGHT_INDEX_KEY KEY_RH_C2R4
#define RIGHT_PINKY_MOD MOD_RH_C5R4
#define RIGHT_RING1_MOD MOD_RH_C4R4
#define RIGHT_RING2_MOD MOD_RH_C4R3
#define RIGHT_MIDDY_MOD MOD_RH_C3R4
#define RIGHT_INDEX_MOD MOD_RH_C2R4
#ifndef PINKY_HOLDING_TYPE
#define PINKY_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef PINKY_CHORD_HOLDING_TYPE
#define PINKY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_CHORD_HOLDING_TYPE
#define LEFT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_CHORD_HOLDING_TYPE
#define RIGHT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef PINKY_HOLDING_TIME
#define PINKY_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef PINKY_CHORD_HOLDING_TIME
#define PINKY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_CHORD_HOLDING_TIME
#define LEFT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_CHORD_HOLDING_TIME
#define RIGHT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
#endif
#ifndef PINKY_STREAK_DECAY
#define PINKY_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef PINKY_CHORD_STREAK_DECAY
#define PINKY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_CHORD_STREAK_DECAY
#define LEFT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_CHORD_STREAK_DECAY
#define RIGHT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
#endif
#ifndef PINKY_REPEAT_DECAY
#define PINKY_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef PINKY_CHORD_REPEAT_DECAY
#define PINKY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_PINKY_CHORD_REPEAT_DECAY
#define LEFT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_PINKY_CHORD_REPEAT_DECAY
#define RIGHT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
#endif
#ifndef RING1_HOLDING_TYPE
#define RING1_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef RING1_CHORD_HOLDING_TYPE
#define RING1_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_CHORD_HOLDING_TYPE
#define LEFT_RING1_CHORD_HOLDING_TYPE RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_CHORD_HOLDING_TYPE
#define RIGHT_RING1_CHORD_HOLDING_TYPE RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RING1_HOLDING_TIME
#define RING1_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef RING1_CHORD_HOLDING_TIME
#define RING1_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_CHORD_HOLDING_TIME
#define LEFT_RING1_CHORD_HOLDING_TIME RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_CHORD_HOLDING_TIME
#define RIGHT_RING1_CHORD_HOLDING_TIME RING1_CHORD_HOLDING_TIME
#endif
#ifndef RING1_STREAK_DECAY
#define RING1_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef RING1_CHORD_STREAK_DECAY
#define RING1_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_CHORD_STREAK_DECAY
#define LEFT_RING1_CHORD_STREAK_DECAY RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_CHORD_STREAK_DECAY
#define RIGHT_RING1_CHORD_STREAK_DECAY RING1_CHORD_STREAK_DECAY
#endif
#ifndef RING1_REPEAT_DECAY
#define RING1_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef RING1_CHORD_REPEAT_DECAY
#define RING1_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_RING1_CHORD_REPEAT_DECAY
#define LEFT_RING1_CHORD_REPEAT_DECAY RING1_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_RING1_CHORD_REPEAT_DECAY
#define RIGHT_RING1_CHORD_REPEAT_DECAY RING1_CHORD_REPEAT_DECAY
#endif
#ifndef RING2_HOLDING_TYPE
#define RING2_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef RING2_CHORD_HOLDING_TYPE
#define RING2_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_CHORD_HOLDING_TYPE
#define LEFT_RING2_CHORD_HOLDING_TYPE RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_CHORD_HOLDING_TYPE
#define RIGHT_RING2_CHORD_HOLDING_TYPE RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RING2_HOLDING_TIME
#define RING2_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef RING2_CHORD_HOLDING_TIME
#define RING2_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_CHORD_HOLDING_TIME
#define LEFT_RING2_CHORD_HOLDING_TIME RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_CHORD_HOLDING_TIME
#define RIGHT_RING2_CHORD_HOLDING_TIME RING2_CHORD_HOLDING_TIME
#endif
#ifndef RING2_STREAK_DECAY
#define RING2_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef RING2_CHORD_STREAK_DECAY
#define RING2_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_CHORD_STREAK_DECAY
#define LEFT_RING2_CHORD_STREAK_DECAY RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_CHORD_STREAK_DECAY
#define RIGHT_RING2_CHORD_STREAK_DECAY RING2_CHORD_STREAK_DECAY
#endif
#ifndef RING2_REPEAT_DECAY
#define RING2_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef RING2_CHORD_REPEAT_DECAY
#define RING2_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_RING2_CHORD_REPEAT_DECAY
#define LEFT_RING2_CHORD_REPEAT_DECAY RING2_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_RING2_CHORD_REPEAT_DECAY
#define RIGHT_RING2_CHORD_REPEAT_DECAY RING2_CHORD_REPEAT_DECAY
#endif
#ifndef MIDDY_HOLDING_TYPE
#define MIDDY_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef MIDDY_CHORD_HOLDING_TYPE
#define MIDDY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_CHORD_HOLDING_TYPE
#define LEFT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_CHORD_HOLDING_TYPE
#define RIGHT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef MIDDY_HOLDING_TIME
#define MIDDY_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef MIDDY_CHORD_HOLDING_TIME
#define MIDDY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_CHORD_HOLDING_TIME
#define LEFT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_CHORD_HOLDING_TIME
#define RIGHT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef MIDDY_STREAK_DECAY
#define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef MIDDY_CHORD_STREAK_DECAY
#define MIDDY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_CHORD_STREAK_DECAY
#define LEFT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_CHORD_STREAK_DECAY
#define RIGHT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef MIDDY_REPEAT_DECAY
#define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef MIDDY_CHORD_REPEAT_DECAY
#define MIDDY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_MIDDY_CHORD_REPEAT_DECAY
#define LEFT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_MIDDY_CHORD_REPEAT_DECAY
#define RIGHT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
#endif
#ifndef INDEX_HOLDING_TYPE
#define INDEX_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef INDEX_CHORD_HOLDING_TYPE
#define INDEX_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_CHORD_HOLDING_TYPE
#define LEFT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_CHORD_HOLDING_TYPE
#define RIGHT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef INDEX_HOLDING_TIME
#define INDEX_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef INDEX_CHORD_HOLDING_TIME
#define INDEX_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_CHORD_HOLDING_TIME
#define LEFT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_CHORD_HOLDING_TIME
#define RIGHT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
#endif
#ifndef INDEX_STREAK_DECAY
#define INDEX_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef INDEX_CHORD_STREAK_DECAY
#define INDEX_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_CHORD_STREAK_DECAY
#define LEFT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_CHORD_STREAK_DECAY
#define RIGHT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
#endif
#ifndef INDEX_REPEAT_DECAY
#define INDEX_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef INDEX_CHORD_REPEAT_DECAY
#define INDEX_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_INDEX_CHORD_REPEAT_DECAY
#define LEFT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_INDEX_CHORD_REPEAT_DECAY
#define RIGHT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_PINKY_HOLDING_TYPE
#define LEFT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_HOLDING_TIME
#define LEFT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_STREAK_DECAY
#define LEFT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_REPEAT_DECAY
#define LEFT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
#endif
left_pinky: homey_left_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_PINKY";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_pinky_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_pinky_hold: homey_left_pinky_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_PINKY_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftPinky>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftPinky>
;
};
left_pinky_tap: homey_left_pinky_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_PINKY_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp LEFT_PINKY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftPinky(mod,key) left_pinky mod key
#ifndef RIGHT_PINKY_HOLDING_TYPE
#define RIGHT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_HOLDING_TIME
#define RIGHT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_STREAK_DECAY
#define RIGHT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_REPEAT_DECAY
#define RIGHT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
#endif
right_pinky: homey_right_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_PINKY";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_pinky_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_pinky_hold: homey_right_pinky_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_PINKY_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightPinky>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightPinky>
;
};
right_pinky_tap: homey_right_pinky_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_PINKY_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp RIGHT_PINKY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightPinky(mod,key) right_pinky mod key
#ifndef LEFT_RING1_HOLDING_TYPE
#define LEFT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_HOLDING_TIME
#define LEFT_RING1_HOLDING_TIME RING1_HOLDING_TIME
#endif
#ifndef LEFT_RING1_STREAK_DECAY
#define LEFT_RING1_STREAK_DECAY RING1_STREAK_DECAY
#endif
#ifndef LEFT_RING1_REPEAT_DECAY
#define LEFT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY
#endif
left_ring1: homey_left_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING1";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_ring1_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_ring1_hold: homey_left_ring1_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_RING1_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing1>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing1>
;
};
left_ring1_tap: homey_left_ring1_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_RING1_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp LEFT_RING1_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftRing1(mod,key) left_ring1 mod key
#ifndef RIGHT_RING1_HOLDING_TYPE
#define RIGHT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_HOLDING_TIME
#define RIGHT_RING1_HOLDING_TIME RING1_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_STREAK_DECAY
#define RIGHT_RING1_STREAK_DECAY RING1_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_REPEAT_DECAY
#define RIGHT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY
#endif
right_ring1: homey_right_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING1";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_ring1_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_ring1_hold: homey_right_ring1_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_RING1_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing1>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing1>
;
};
right_ring1_tap: homey_right_ring1_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_RING1_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp RIGHT_RING1_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightRing1(mod,key) right_ring1 mod key
#ifndef LEFT_RING2_HOLDING_TYPE
#define LEFT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_HOLDING_TIME
#define LEFT_RING2_HOLDING_TIME RING2_HOLDING_TIME
#endif
#ifndef LEFT_RING2_STREAK_DECAY
#define LEFT_RING2_STREAK_DECAY RING2_STREAK_DECAY
#endif
#ifndef LEFT_RING2_REPEAT_DECAY
#define LEFT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY
#endif
left_ring2: homey_left_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING2";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_ring2_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_ring2_hold: homey_left_ring2_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_RING2_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing2>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing2>
;
};
left_ring2_tap: homey_left_ring2_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_RING2_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp LEFT_RING2_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftRing2(mod,key) left_ring2 mod key
#ifndef RIGHT_RING2_HOLDING_TYPE
#define RIGHT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_HOLDING_TIME
#define RIGHT_RING2_HOLDING_TIME RING2_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_STREAK_DECAY
#define RIGHT_RING2_STREAK_DECAY RING2_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_REPEAT_DECAY
#define RIGHT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY
#endif
right_ring2: homey_right_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING2";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_ring2_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_ring2_hold: homey_right_ring2_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_RING2_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing2>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing2>
;
};
right_ring2_tap: homey_right_ring2_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_RING2_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp RIGHT_RING2_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightRing2(mod,key) right_ring2 mod key
#ifndef LEFT_MIDDY_HOLDING_TYPE
#define LEFT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_HOLDING_TIME
#define LEFT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_STREAK_DECAY
#define LEFT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_REPEAT_DECAY
#define LEFT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
#endif
left_middy: homey_left_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_MIDDY";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_middy_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_middy_hold: homey_left_middy_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_MIDDY_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftMiddy>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftMiddy>
;
};
left_middy_tap: homey_left_middy_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_MIDDY_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp LEFT_MIDDY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftMiddy(mod,key) left_middy mod key
#ifndef RIGHT_MIDDY_HOLDING_TYPE
#define RIGHT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_HOLDING_TIME
#define RIGHT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_STREAK_DECAY
#define RIGHT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_REPEAT_DECAY
#define RIGHT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
#endif
right_middy: homey_right_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_MIDDY";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_middy_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_middy_hold: homey_right_middy_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_MIDDY_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightMiddy>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightMiddy>
;
};
right_middy_tap: homey_right_middy_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_MIDDY_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp RIGHT_MIDDY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightMiddy(mod,key) right_middy mod key
#ifndef LEFT_INDEX_HOLDING_TYPE
#define LEFT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_HOLDING_TIME
#define LEFT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_STREAK_DECAY
#define LEFT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_REPEAT_DECAY
#define LEFT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
#endif
left_index: homey_left_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_INDEX";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_index_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_index_hold: homey_left_index_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_INDEX_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftIndex>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftIndex>
;
};
left_index_tap: homey_left_index_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_LEFT_INDEX_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp LEFT_INDEX_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftIndex(mod,key) left_index mod key
#ifndef RIGHT_INDEX_HOLDING_TYPE
#define RIGHT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_HOLDING_TIME
#define RIGHT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_STREAK_DECAY
#define RIGHT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_REPEAT_DECAY
#define RIGHT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
#endif
right_index: homey_right_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_INDEX";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_index_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_index_hold: homey_right_index_hold {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_INDEX_HOLD";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightIndex>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightIndex>
;
};
right_index_tap: homey_right_index_tap {
compatible = "zmk,behavior-macro-one-param";
label = "HOMEY_RIGHT_INDEX_TAP";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp LGUI>
, <&macro_tap &kp RIGHT_INDEX_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightIndex(mod,key) right_index mod key
#ifndef LEFT_RING1_PINKY_HOLDING_TYPE
#define LEFT_RING1_PINKY_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_PINKY_HOLDING_TIME
#define LEFT_RING1_PINKY_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_PINKY_STREAK_DECAY
#define LEFT_RING1_PINKY_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_PINKY_REPEAT_DECAY
#define LEFT_RING1_PINKY_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_pinky: homey_left_ring1_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING1_PINKY";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Pinky left_ring1_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef LEFT_RING2_PINKY_HOLDING_TYPE
#define LEFT_RING2_PINKY_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_PINKY_HOLDING_TIME
#define LEFT_RING2_PINKY_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_PINKY_STREAK_DECAY
#define LEFT_RING2_PINKY_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_PINKY_REPEAT_DECAY
#define LEFT_RING2_PINKY_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_pinky: homey_left_ring2_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING2_PINKY";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Pinky left_ring2_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef LEFT_MIDDY_PINKY_HOLDING_TYPE
#define LEFT_MIDDY_PINKY_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_PINKY_HOLDING_TIME
#define LEFT_MIDDY_PINKY_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_PINKY_STREAK_DECAY
#define LEFT_MIDDY_PINKY_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_PINKY_REPEAT_DECAY
#define LEFT_MIDDY_PINKY_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_pinky: homey_left_middy_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_MIDDY_PINKY";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyPinky left_middy_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef LEFT_INDEX_PINKY_HOLDING_TYPE
#define LEFT_INDEX_PINKY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_PINKY_HOLDING_TIME
#define LEFT_INDEX_PINKY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_PINKY_STREAK_DECAY
#define LEFT_INDEX_PINKY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_PINKY_REPEAT_DECAY
#define LEFT_INDEX_PINKY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_pinky: homey_left_index_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_INDEX_PINKY";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexPinky left_index_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef RIGHT_RING1_PINKY_HOLDING_TYPE
#define RIGHT_RING1_PINKY_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_PINKY_HOLDING_TIME
#define RIGHT_RING1_PINKY_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_PINKY_STREAK_DECAY
#define RIGHT_RING1_PINKY_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_PINKY_REPEAT_DECAY
#define RIGHT_RING1_PINKY_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_pinky: homey_right_ring1_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING1_PINKY";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Pinky right_ring1_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef RIGHT_RING2_PINKY_HOLDING_TYPE
#define RIGHT_RING2_PINKY_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_PINKY_HOLDING_TIME
#define RIGHT_RING2_PINKY_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_PINKY_STREAK_DECAY
#define RIGHT_RING2_PINKY_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_PINKY_REPEAT_DECAY
#define RIGHT_RING2_PINKY_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_pinky: homey_right_ring2_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING2_PINKY";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Pinky right_ring2_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef RIGHT_MIDDY_PINKY_HOLDING_TYPE
#define RIGHT_MIDDY_PINKY_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_PINKY_HOLDING_TIME
#define RIGHT_MIDDY_PINKY_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_PINKY_STREAK_DECAY
#define RIGHT_MIDDY_PINKY_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_PINKY_REPEAT_DECAY
#define RIGHT_MIDDY_PINKY_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_pinky: homey_right_middy_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_MIDDY_PINKY";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyPinky right_middy_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef RIGHT_INDEX_PINKY_HOLDING_TYPE
#define RIGHT_INDEX_PINKY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_PINKY_HOLDING_TIME
#define RIGHT_INDEX_PINKY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_PINKY_STREAK_DECAY
#define RIGHT_INDEX_PINKY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_PINKY_REPEAT_DECAY
#define RIGHT_INDEX_PINKY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_pinky: homey_right_index_pinky {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_INDEX_PINKY";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexPinky right_index_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef LEFT_PINKY_RING1_HOLDING_TYPE
#define LEFT_PINKY_RING1_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_RING1_HOLDING_TIME
#define LEFT_PINKY_RING1_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_RING1_STREAK_DECAY
#define LEFT_PINKY_RING1_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_RING1_REPEAT_DECAY
#define LEFT_PINKY_RING1_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_ring1: homey_left_pinky_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_PINKY_RING1";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyRing1 left_pinky_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef LEFT_RING2_RING1_HOLDING_TYPE
#define LEFT_RING2_RING1_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_RING1_HOLDING_TIME
#define LEFT_RING2_RING1_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_RING1_STREAK_DECAY
#define LEFT_RING2_RING1_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_RING1_REPEAT_DECAY
#define LEFT_RING2_RING1_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_ring1: homey_left_ring2_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING2_RING1";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Ring1 left_ring2_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef LEFT_MIDDY_RING1_HOLDING_TYPE
#define LEFT_MIDDY_RING1_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_RING1_HOLDING_TIME
#define LEFT_MIDDY_RING1_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_RING1_STREAK_DECAY
#define LEFT_MIDDY_RING1_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_RING1_REPEAT_DECAY
#define LEFT_MIDDY_RING1_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_ring1: homey_left_middy_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_MIDDY_RING1";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyRing1 left_middy_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef LEFT_INDEX_RING1_HOLDING_TYPE
#define LEFT_INDEX_RING1_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_RING1_HOLDING_TIME
#define LEFT_INDEX_RING1_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_RING1_STREAK_DECAY
#define LEFT_INDEX_RING1_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_RING1_REPEAT_DECAY
#define LEFT_INDEX_RING1_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_ring1: homey_left_index_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_INDEX_RING1";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexRing1 left_index_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef RIGHT_PINKY_RING1_HOLDING_TYPE
#define RIGHT_PINKY_RING1_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_RING1_HOLDING_TIME
#define RIGHT_PINKY_RING1_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_RING1_STREAK_DECAY
#define RIGHT_PINKY_RING1_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_RING1_REPEAT_DECAY
#define RIGHT_PINKY_RING1_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_ring1: homey_right_pinky_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_PINKY_RING1";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyRing1 right_pinky_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef RIGHT_RING2_RING1_HOLDING_TYPE
#define RIGHT_RING2_RING1_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_RING1_HOLDING_TIME
#define RIGHT_RING2_RING1_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_RING1_STREAK_DECAY
#define RIGHT_RING2_RING1_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_RING1_REPEAT_DECAY
#define RIGHT_RING2_RING1_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_ring1: homey_right_ring2_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING2_RING1";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Ring1 right_ring2_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef RIGHT_MIDDY_RING1_HOLDING_TYPE
#define RIGHT_MIDDY_RING1_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_RING1_HOLDING_TIME
#define RIGHT_MIDDY_RING1_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_RING1_STREAK_DECAY
#define RIGHT_MIDDY_RING1_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_RING1_REPEAT_DECAY
#define RIGHT_MIDDY_RING1_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_ring1: homey_right_middy_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_MIDDY_RING1";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyRing1 right_middy_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef RIGHT_INDEX_RING1_HOLDING_TYPE
#define RIGHT_INDEX_RING1_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_RING1_HOLDING_TIME
#define RIGHT_INDEX_RING1_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_RING1_STREAK_DECAY
#define RIGHT_INDEX_RING1_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_RING1_REPEAT_DECAY
#define RIGHT_INDEX_RING1_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_ring1: homey_right_index_ring1 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_INDEX_RING1";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexRing1 right_index_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef LEFT_PINKY_RING2_HOLDING_TYPE
#define LEFT_PINKY_RING2_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_RING2_HOLDING_TIME
#define LEFT_PINKY_RING2_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_RING2_STREAK_DECAY
#define LEFT_PINKY_RING2_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_RING2_REPEAT_DECAY
#define LEFT_PINKY_RING2_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_ring2: homey_left_pinky_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_PINKY_RING2";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyRing2 left_pinky_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef LEFT_RING1_RING2_HOLDING_TYPE
#define LEFT_RING1_RING2_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_RING2_HOLDING_TIME
#define LEFT_RING1_RING2_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_RING2_STREAK_DECAY
#define LEFT_RING1_RING2_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_RING2_REPEAT_DECAY
#define LEFT_RING1_RING2_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_ring2: homey_left_ring1_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING1_RING2";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Ring2 left_ring1_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef LEFT_MIDDY_RING2_HOLDING_TYPE
#define LEFT_MIDDY_RING2_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_RING2_HOLDING_TIME
#define LEFT_MIDDY_RING2_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_RING2_STREAK_DECAY
#define LEFT_MIDDY_RING2_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_RING2_REPEAT_DECAY
#define LEFT_MIDDY_RING2_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_ring2: homey_left_middy_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_MIDDY_RING2";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyRing2 left_middy_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef LEFT_INDEX_RING2_HOLDING_TYPE
#define LEFT_INDEX_RING2_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_RING2_HOLDING_TIME
#define LEFT_INDEX_RING2_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_RING2_STREAK_DECAY
#define LEFT_INDEX_RING2_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_RING2_REPEAT_DECAY
#define LEFT_INDEX_RING2_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_ring2: homey_left_index_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_INDEX_RING2";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexRing2 left_index_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef RIGHT_PINKY_RING2_HOLDING_TYPE
#define RIGHT_PINKY_RING2_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_RING2_HOLDING_TIME
#define RIGHT_PINKY_RING2_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_RING2_STREAK_DECAY
#define RIGHT_PINKY_RING2_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_RING2_REPEAT_DECAY
#define RIGHT_PINKY_RING2_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_ring2: homey_right_pinky_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_PINKY_RING2";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyRing2 right_pinky_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef RIGHT_RING1_RING2_HOLDING_TYPE
#define RIGHT_RING1_RING2_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_RING2_HOLDING_TIME
#define RIGHT_RING1_RING2_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_RING2_STREAK_DECAY
#define RIGHT_RING1_RING2_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_RING2_REPEAT_DECAY
#define RIGHT_RING1_RING2_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_ring2: homey_right_ring1_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING1_RING2";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Ring2 right_ring1_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef RIGHT_MIDDY_RING2_HOLDING_TYPE
#define RIGHT_MIDDY_RING2_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_RING2_HOLDING_TIME
#define RIGHT_MIDDY_RING2_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_RING2_STREAK_DECAY
#define RIGHT_MIDDY_RING2_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_RING2_REPEAT_DECAY
#define RIGHT_MIDDY_RING2_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_ring2: homey_right_middy_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_MIDDY_RING2";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyRing2 right_middy_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef RIGHT_INDEX_RING2_HOLDING_TYPE
#define RIGHT_INDEX_RING2_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_RING2_HOLDING_TIME
#define RIGHT_INDEX_RING2_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_RING2_STREAK_DECAY
#define RIGHT_INDEX_RING2_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_RING2_REPEAT_DECAY
#define RIGHT_INDEX_RING2_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_ring2: homey_right_index_ring2 {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_INDEX_RING2";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexRing2 right_index_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef LEFT_PINKY_MIDDY_HOLDING_TYPE
#define LEFT_PINKY_MIDDY_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_MIDDY_HOLDING_TIME
#define LEFT_PINKY_MIDDY_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_MIDDY_STREAK_DECAY
#define LEFT_PINKY_MIDDY_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_MIDDY_REPEAT_DECAY
#define LEFT_PINKY_MIDDY_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_middy: homey_left_pinky_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_PINKY_MIDDY";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyMiddy left_pinky_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef LEFT_RING1_MIDDY_HOLDING_TYPE
#define LEFT_RING1_MIDDY_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_MIDDY_HOLDING_TIME
#define LEFT_RING1_MIDDY_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_MIDDY_STREAK_DECAY
#define LEFT_RING1_MIDDY_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_MIDDY_REPEAT_DECAY
#define LEFT_RING1_MIDDY_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_middy: homey_left_ring1_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING1_MIDDY";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Middy left_ring1_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef LEFT_RING2_MIDDY_HOLDING_TYPE
#define LEFT_RING2_MIDDY_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_MIDDY_HOLDING_TIME
#define LEFT_RING2_MIDDY_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_MIDDY_STREAK_DECAY
#define LEFT_RING2_MIDDY_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_MIDDY_REPEAT_DECAY
#define LEFT_RING2_MIDDY_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_middy: homey_left_ring2_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING2_MIDDY";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Middy left_ring2_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef LEFT_INDEX_MIDDY_HOLDING_TYPE
#define LEFT_INDEX_MIDDY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_MIDDY_HOLDING_TIME
#define LEFT_INDEX_MIDDY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_MIDDY_STREAK_DECAY
#define LEFT_INDEX_MIDDY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_MIDDY_REPEAT_DECAY
#define LEFT_INDEX_MIDDY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_middy: homey_left_index_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_INDEX_MIDDY";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexMiddy left_index_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef RIGHT_PINKY_MIDDY_HOLDING_TYPE
#define RIGHT_PINKY_MIDDY_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_MIDDY_HOLDING_TIME
#define RIGHT_PINKY_MIDDY_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_MIDDY_STREAK_DECAY
#define RIGHT_PINKY_MIDDY_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_MIDDY_REPEAT_DECAY
#define RIGHT_PINKY_MIDDY_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_middy: homey_right_pinky_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_PINKY_MIDDY";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyMiddy right_pinky_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef RIGHT_RING1_MIDDY_HOLDING_TYPE
#define RIGHT_RING1_MIDDY_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_MIDDY_HOLDING_TIME
#define RIGHT_RING1_MIDDY_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_MIDDY_STREAK_DECAY
#define RIGHT_RING1_MIDDY_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_MIDDY_REPEAT_DECAY
#define RIGHT_RING1_MIDDY_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_middy: homey_right_ring1_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING1_MIDDY";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Middy right_ring1_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef RIGHT_RING2_MIDDY_HOLDING_TYPE
#define RIGHT_RING2_MIDDY_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_MIDDY_HOLDING_TIME
#define RIGHT_RING2_MIDDY_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_MIDDY_STREAK_DECAY
#define RIGHT_RING2_MIDDY_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_MIDDY_REPEAT_DECAY
#define RIGHT_RING2_MIDDY_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_middy: homey_right_ring2_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING2_MIDDY";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Middy right_ring2_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef RIGHT_INDEX_MIDDY_HOLDING_TYPE
#define RIGHT_INDEX_MIDDY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_MIDDY_HOLDING_TIME
#define RIGHT_INDEX_MIDDY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_MIDDY_STREAK_DECAY
#define RIGHT_INDEX_MIDDY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_MIDDY_REPEAT_DECAY
#define RIGHT_INDEX_MIDDY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_middy: homey_right_index_middy {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_INDEX_MIDDY";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexMiddy right_index_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef LEFT_PINKY_INDEX_HOLDING_TYPE
#define LEFT_PINKY_INDEX_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_INDEX_HOLDING_TIME
#define LEFT_PINKY_INDEX_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_INDEX_STREAK_DECAY
#define LEFT_PINKY_INDEX_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_INDEX_REPEAT_DECAY
#define LEFT_PINKY_INDEX_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_index: homey_left_pinky_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_PINKY_INDEX";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyIndex left_pinky_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef LEFT_RING1_INDEX_HOLDING_TYPE
#define LEFT_RING1_INDEX_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_INDEX_HOLDING_TIME
#define LEFT_RING1_INDEX_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_INDEX_STREAK_DECAY
#define LEFT_RING1_INDEX_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_INDEX_REPEAT_DECAY
#define LEFT_RING1_INDEX_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_index: homey_left_ring1_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING1_INDEX";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Index left_ring1_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef LEFT_RING2_INDEX_HOLDING_TYPE
#define LEFT_RING2_INDEX_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_INDEX_HOLDING_TIME
#define LEFT_RING2_INDEX_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_INDEX_STREAK_DECAY
#define LEFT_RING2_INDEX_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_INDEX_REPEAT_DECAY
#define LEFT_RING2_INDEX_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_index: homey_left_ring2_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_RING2_INDEX";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Index left_ring2_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef LEFT_MIDDY_INDEX_HOLDING_TYPE
#define LEFT_MIDDY_INDEX_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_INDEX_HOLDING_TIME
#define LEFT_MIDDY_INDEX_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_INDEX_STREAK_DECAY
#define LEFT_MIDDY_INDEX_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_INDEX_REPEAT_DECAY
#define LEFT_MIDDY_INDEX_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_index: homey_left_middy_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_LEFT_MIDDY_INDEX";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyIndex left_middy_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef RIGHT_PINKY_INDEX_HOLDING_TYPE
#define RIGHT_PINKY_INDEX_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_INDEX_HOLDING_TIME
#define RIGHT_PINKY_INDEX_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_INDEX_STREAK_DECAY
#define RIGHT_PINKY_INDEX_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_INDEX_REPEAT_DECAY
#define RIGHT_PINKY_INDEX_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_index: homey_right_pinky_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_PINKY_INDEX";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyIndex right_pinky_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
#ifndef RIGHT_RING1_INDEX_HOLDING_TYPE
#define RIGHT_RING1_INDEX_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_INDEX_HOLDING_TIME
#define RIGHT_RING1_INDEX_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_INDEX_STREAK_DECAY
#define RIGHT_RING1_INDEX_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_INDEX_REPEAT_DECAY
#define RIGHT_RING1_INDEX_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_index: homey_right_ring1_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING1_INDEX";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Index right_ring1_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
#ifndef RIGHT_RING2_INDEX_HOLDING_TYPE
#define RIGHT_RING2_INDEX_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_INDEX_HOLDING_TIME
#define RIGHT_RING2_INDEX_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_INDEX_STREAK_DECAY
#define RIGHT_RING2_INDEX_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_INDEX_REPEAT_DECAY
#define RIGHT_RING2_INDEX_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_index: homey_right_ring2_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_RING2_INDEX";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Index right_ring2_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
#ifndef RIGHT_MIDDY_INDEX_HOLDING_TYPE
#define RIGHT_MIDDY_INDEX_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_INDEX_HOLDING_TIME
#define RIGHT_MIDDY_INDEX_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_INDEX_STREAK_DECAY
#define RIGHT_MIDDY_INDEX_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_INDEX_REPEAT_DECAY
#define RIGHT_MIDDY_INDEX_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_index: homey_right_middy_index {
compatible = "zmk,behavior-hold-tap";
label = "HOMEY_RIGHT_MIDDY_INDEX";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
#endif
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyIndex right_middy_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
plain: plain_typing_layer {
compatible = "zmk,behavior-hold-tap";
label = "PLAIN_TYPING_LAYER";
flavor = PLAIN_HOLDING_TYPE;
tapping-term-ms = <PLAIN_HOLDING_TIME>;
require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
#binding-cells = <2>;
bindings = <&mo>, <&kp>;
};
plain_engram_COMMA: plain_typing_layer_engram_COMMA {
compatible = "zmk,behavior-hold-tap";
label = "PLAIN_TYPING_LAYER_ENGRAM_COMMA";
flavor = PLAIN_HOLDING_TYPE;
tapping-term-ms = <PLAIN_HOLDING_TIME>;
require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
#binding-cells = <2>;
bindings = <&mo>, <&engram_COMMA>;
};
plain_engram_DOT: plain_typing_layer_engram_DOT {
compatible = "zmk,behavior-hold-tap";
label = "PLAIN_TYPING_LAYER_ENGRAM_DOT";
flavor = PLAIN_HOLDING_TYPE;
tapping-term-ms = <PLAIN_HOLDING_TIME>;
require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
#binding-cells = <2>;
bindings = <&mo>, <&engram_DOT>;
};
thumb: thumb_layer_access {
compatible = "zmk,behavior-hold-tap";
label = "THUMB_LAYER_ACCESS";
flavor = THUMB_HOLDING_TYPE;
tapping-term-ms = <THUMB_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <THUMB_REPEAT_DECAY>; 
#endif
#binding-cells = <2>;
bindings = <&mo>, <&kp>;
};
thumb_parang_left: thumb_layer_access_parang_left {
compatible = "zmk,behavior-hold-tap";
label = "THUMB_LAYER_ACCESS_PARANG_LEFT";
flavor = THUMB_HOLDING_TYPE;
tapping-term-ms = <THUMB_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <THUMB_REPEAT_DECAY>; 
#endif
#binding-cells = <2>;
bindings = <&mo>, <&parang_left>;
};
space: thumb_layer_access_spacebar {
compatible = "zmk,behavior-hold-tap";
label = "THUMB_LAYER_ACCESS_SPACEBAR";
flavor = SPACE_HOLDING_TYPE;
tapping-term-ms = <SPACE_HOLDING_TIME>;
#ifdef ENABLE_KEY_REPEAT
quick-tap-ms = <SPACE_REPEAT_DECAY>; 
#endif
#binding-cells = <2>;
bindings = <&mo>, <&kp>;
};
#ifndef CAPPY_HOLDING_TIME
#define CAPPY_HOLDING_TIME 200
#endif
cappy: capsword_and_capslock {
compatible = "zmk,behavior-hold-tap";
label = "CAPSWORD_AND_CAPSLOCK";
flavor = "tap-preferred";
tapping-term-ms = <CAPPY_HOLDING_TIME>;
#binding-cells = <2>;
bindings = <&kp>, <&caps_word>;
};
parang_left: left_parenthesis_and_less_than {
compatible = "zmk,behavior-mod-morph";
label = "LEFT_PARENTHESIS_AND_LESS_THAN";
#binding-cells = <0>;
bindings = <&kp LPAR>, <&kp LT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
parang_right: right_parenthesis_and_greater_than {
compatible = "zmk,behavior-mod-morph";
label = "RIGHT_PARENTHESIS_AND_GREATER_THAN";
#binding-cells = <0>;
bindings = <&kp RPAR>, <&kp GT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N1: engram_shift_N1_PIPE {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N1_PIPE";
#binding-cells = <0>;
bindings = <&kp N1>, <&kp PIPE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N2: engram_shift_N2_EQUAL {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N2_EQUAL";
#binding-cells = <0>;
bindings = <&kp N2>, <&kp EQUAL>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N3: engram_shift_N3_TILDE {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N3_TILDE";
#binding-cells = <0>;
bindings = <&kp N3>, <&kp TILDE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N4: engram_shift_N4_PLUS {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N4_PLUS";
#binding-cells = <0>;
bindings = <&kp N4>, <&kp PLUS>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N5: engram_shift_N5_LT {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N5_LT";
#binding-cells = <0>;
bindings = <&kp N5>, <&kp LT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N6: engram_shift_N6_GT {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N6_GT";
#binding-cells = <0>;
bindings = <&kp N6>, <&kp GT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N7: engram_shift_N7_CARET {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N7_CARET";
#binding-cells = <0>;
bindings = <&kp N7>, <&kp CARET>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N8: engram_shift_N8_AMPS {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N8_AMPS";
#binding-cells = <0>;
bindings = <&kp N8>, <&kp AMPS>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N9: engram_shift_N9_PRCNT {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N9_PRCNT";
#binding-cells = <0>;
bindings = <&kp N9>, <&kp PRCNT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N0: engram_shift_N0_STAR {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_N0_STAR";
#binding-cells = <0>;
bindings = <&kp N0>, <&kp STAR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_SQT: engram_shift_SQT_LPAR {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_SQT_LPAR";
#binding-cells = <0>;
bindings = <&kp SQT>, <&kp LPAR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_DQT: engram_shift_DQT_RPAR {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_DQT_RPAR";
#binding-cells = <0>;
bindings = <&kp DQT>, <&kp RPAR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_COMMA: engram_shift_COMMA_SEMI {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_COMMA_SEMI";
#binding-cells = <0>;
bindings = <&kp COMMA>, <&kp SEMI>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_DOT: engram_shift_DOT_COLON {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_DOT_COLON";
#binding-cells = <0>;
bindings = <&kp DOT>, <&kp COLON>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_QMARK: engram_shift_QMARK_EXCL {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_QMARK_EXCL";
#binding-cells = <0>;
bindings = <&kp QMARK>, <&kp EXCL>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_HASH: engram_shift_HASH_DLLR {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_HASH_DLLR";
#binding-cells = <0>;
bindings = <&kp HASH>, <&kp DLLR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_AT: engram_shift_AT_GRAVE {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_AT_GRAVE";
#binding-cells = <0>;
bindings = <&kp AT>, <&kp GRAVE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_FSLH: engram_shift_FSLH_BSLH {
compatible = "zmk,behavior-mod-morph";
label = "ENGRAM_SHIFT_FSLH_BSLH";
#binding-cells = <0>;
bindings = <&kp FSLH>, <&kp BSLH>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
behavior_caps_word {
continue-list = <
UNDERSCORE MINUS
BACKSPACE DELETE
N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
>;
};
};
macros {
ZMK_MACRO(linux_magic_sysrq,
bindings
= <&macro_press &mo 0 &kp RALT>
, <&macro_tap &kp PRINTSCREEN>
, <&macro_pause_for_release>
, <&macro_release &mo 0 &kp RALT>
;
)
#ifndef SELECT_WORD_DELAY
#define SELECT_WORD_DELAY 1
#endif
ZMK_MACRO(select_none,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
)
select_word: select_word {
compatible = "zmk,behavior-mod-morph";
label = "SELECT_WORD";
#binding-cells = <0>;
bindings = <&select_word_right>, <&select_word_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(select_word_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
)
ZMK_MACRO(select_word_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
)
extend_word: extend_word {
compatible = "zmk,behavior-mod-morph";
label = "EXTEND_WORD";
#binding-cells = <0>;
bindings = <&extend_word_right>, <&extend_word_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(extend_word_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(LS(RIGHT))>;
)
ZMK_MACRO(extend_word_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(LS(LEFT))>;
)
select_line: select_line {
compatible = "zmk,behavior-mod-morph";
label = "SELECT_LINE";
#binding-cells = <0>;
bindings = <&select_line_right>, <&select_line_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(select_line_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _HOME &kp LS(_END)>;
)
ZMK_MACRO(select_line_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _END &kp LS(_HOME)>;
)
extend_line: extend_line {
compatible = "zmk,behavior-mod-morph";
label = "EXTEND_LINE";
#binding-cells = <0>;
bindings = <&extend_line_right>, <&extend_line_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(extend_line_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp LS(DOWN) &kp LS(_END)>;
)
ZMK_MACRO(extend_line_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp LS(UP) &kp LS(_HOME)>;
)
#ifndef UNICODE_TARGET_OS
#define UNICODE_TARGET_OS OPERATING_SYSTEM
#endif
#ifndef UNICODE_TAP_DELAY
#define UNICODE_TAP_DELAY 1
#endif
#ifndef UNICODE_SEQ_DELAY
#define UNICODE_SEQ_DELAY 10
#endif
#define UNICODE(name, ...) \
ZMK_MACRO(name, \
wait-ms = <UNICODE_TAP_DELAY>; \
tap-ms = <UNICODE_TAP_DELAY>; \
bindings = __VA_ARGS__; \
)
UNICODE(world_degree_sign, /* ° */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp B &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_section_sign, /* § */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp A &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_paragraph_sign, /* ¶ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp B &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_o_ordinal, /* º */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp B &kp A &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp A>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp A>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_a_ordinal, /* ª */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp A &kp A &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp A>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp A>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_exclaim_left, /* ¡ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp A &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_question_left, /* ¿ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp B &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_c_cedilla_lower, /* ç */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_c_cedilla_upper, /* Ç */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
world_c_cedilla: world_c_cedilla {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_C_CEDILLA";
#binding-cells = <0>;
bindings = <&world_c_cedilla_lower>, <&world_c_cedilla_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_acute_lower, /* í */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp D>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_i_acute_upper, /* Í */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp D>, <&macro_release &kp LALT>
#endif
)
world_i_acute: world_i_acute {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_I_ACUTE";
#binding-cells = <0>;
bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_diaeresis_lower, /* ï */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_i_diaeresis_upper, /* Ï */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp F>, <&macro_release &kp LALT>
#endif
)
world_i_diaeresis: world_i_diaeresis {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_I_DIAERESIS";
#binding-cells = <0>;
bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_circumflex_lower, /* î */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp E &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp E>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp E>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_i_circumflex_upper, /* Î */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp E &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp E>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp E>, <&macro_release &kp LALT>
#endif
)
world_i_circumflex: world_i_circumflex {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_I_CIRCUMFLEX";
#binding-cells = <0>;
bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_grave_lower, /* ì */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_i_grave_upper, /* Ì */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp C>, <&macro_release &kp LALT>
#endif
)
world_i_grave: world_i_grave {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_I_GRAVE";
#binding-cells = <0>;
bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_acute_lower, /* é */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_e_acute_upper, /* É */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
world_e_acute: world_e_acute {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_ACUTE";
#binding-cells = <0>;
bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_diaeresis_lower, /* ë */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp B>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_e_diaeresis_upper, /* Ë */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp B>, <&macro_release &kp LALT>
#endif
)
world_e_diaeresis: world_e_diaeresis {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_DIAERESIS";
#binding-cells = <0>;
bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_circumflex_lower, /* ê */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp A &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp A>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp A>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_e_circumflex_upper, /* Ê */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp A &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp A>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp A>, <&macro_release &kp LALT>
#endif
)
world_e_circumflex: world_e_circumflex {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_CIRCUMFLEX";
#binding-cells = <0>;
bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_grave_lower, /* è */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_e_grave_upper, /* È */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
world_e_grave: world_e_grave {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_GRAVE";
#binding-cells = <0>;
bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_ae_lower, /* æ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_e_ae_upper, /* Æ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
world_e_ae: world_e_ae {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_AE";
#binding-cells = <0>;
bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_acute_lower, /* á */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_a_acute_upper, /* Á */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
world_a_acute: world_a_acute {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_ACUTE";
#binding-cells = <0>;
bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_diaeresis_lower, /* ä */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_a_diaeresis_upper, /* Ä */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
world_a_diaeresis: world_a_diaeresis {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_DIAERESIS";
#binding-cells = <0>;
bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_circumflex_lower, /* â */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_a_circumflex_upper, /* Â */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
world_a_circumflex: world_a_circumflex {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_CIRCUMFLEX";
#binding-cells = <0>;
bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_grave_lower, /* à */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_a_grave_upper, /* À */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
world_a_grave: world_a_grave {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_GRAVE";
#binding-cells = <0>;
bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_tilde_lower, /* ã */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_a_tilde_upper, /* Ã */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
world_a_tilde: world_a_tilde {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_TILDE";
#binding-cells = <0>;
bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_ring_lower, /* å */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp E &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_a_ring_upper, /* Å */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp C &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
world_a_ring: world_a_ring {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_RING";
#binding-cells = <0>;
bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_y_acute_lower, /* ý */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp D>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_y_acute_upper, /* Ý */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp D>, <&macro_release &kp LALT>
#endif
)
world_y_acute: world_y_acute {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_Y_ACUTE";
#binding-cells = <0>;
bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_y_diaeresis_lower, /* ÿ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_y_diaeresis_upper, /* Ÿ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp N7 &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N1 &kp N7 &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp KP_N7 &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
world_y_diaeresis: world_y_diaeresis {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_Y_DIAERESIS";
#binding-cells = <0>;
bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_acute_lower, /* ó */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_o_acute_upper, /* Ó */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
world_o_acute: world_o_acute {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_ACUTE";
#binding-cells = <0>;
bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_diaeresis_lower, /* ö */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_o_diaeresis_upper, /* Ö */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
world_o_diaeresis: world_o_diaeresis {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_DIAERESIS";
#binding-cells = <0>;
bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_circumflex_lower, /* ô */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_o_circumflex_upper, /* Ô */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
world_o_circumflex: world_o_circumflex {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_CIRCUMFLEX";
#binding-cells = <0>;
bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_grave_lower, /* ò */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_o_grave_upper, /* Ò */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
world_o_grave: world_o_grave {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_GRAVE";
#binding-cells = <0>;
bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_tilde_lower, /* õ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_o_tilde_upper, /* Õ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
world_o_tilde: world_o_tilde {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_TILDE";
#binding-cells = <0>;
bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_slash_lower, /* ø */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_o_slash_upper, /* Ø */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
world_o_slash: world_o_slash {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_SLASH";
#binding-cells = <0>;
bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_acute_lower, /* ú */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp A &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp A>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp A>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_u_acute_upper, /* Ú */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp A &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp A>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp A>, <&macro_release &kp LALT>
#endif
)
world_u_acute: world_u_acute {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_U_ACUTE";
#binding-cells = <0>;
bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_diaeresis_lower, /* ü */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_u_diaeresis_upper, /* Ü */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp C>, <&macro_release &kp LALT>
#endif
)
world_u_diaeresis: world_u_diaeresis {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_U_DIAERESIS";
#binding-cells = <0>;
bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_circumflex_lower, /* û */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp B>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_u_circumflex_upper, /* Û */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp B>, <&macro_release &kp LALT>
#endif
)
world_u_circumflex: world_u_circumflex {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_U_CIRCUMFLEX";
#binding-cells = <0>;
bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_grave_lower, /* ù */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_u_grave_upper, /* Ù */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
world_u_grave: world_u_grave {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_U_GRAVE";
#binding-cells = <0>;
bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_n_tilde_lower, /* ñ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_n_tilde_upper, /* Ñ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp D &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
world_n_tilde: world_n_tilde {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_N_TILDE";
#binding-cells = <0>;
bindings = <&world_n_tilde_lower>, <&world_n_tilde_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_plain_lower, /* ' */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N2 &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_quotes_plain_upper, /* " */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N2 &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
world_quotes_plain: world_quotes_plain {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_PLAIN";
#binding-cells = <0>;
bindings = <&world_quotes_plain_lower>, <&world_quotes_plain_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_grave_lower, /* ` */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N6 &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N6 &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N6 &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_quotes_grave_upper, /* ´ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp B &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
world_quotes_grave: world_quotes_grave {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_GRAVE";
#binding-cells = <0>;
bindings = <&world_quotes_grave_lower>, <&world_quotes_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_angle_lower, /* « */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp A &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp B>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_quotes_angle_upper, /* » */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp B &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp B>, <&macro_release &kp LALT>
#endif
)
world_quotes_angle: world_quotes_angle {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_ANGLE";
#binding-cells = <0>;
bindings = <&world_quotes_angle_lower>, <&world_quotes_angle_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_curly1_lower, /* ‘ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_quotes_curly1_upper, /* ’ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
world_quotes_curly1: world_quotes_curly1 {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_CURLY1";
#binding-cells = <0>;
bindings = <&world_quotes_curly1_lower>, <&world_quotes_curly1_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_curly2_lower, /* “ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(world_quotes_curly2_upper, /* ” */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp D>, <&macro_release &kp LALT>
#endif
)
world_quotes_curly2: world_quotes_curly2 {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_CURLY2";
#binding-cells = <0>;
bindings = <&world_quotes_curly2_lower>, <&world_quotes_curly2_upper>;
mods = <MOD_LSFT>;
};
world_i_base: world_i_base {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_I_BASE";
#binding-cells = <0>;
bindings = <&world_i_acute>, <&world_i_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_i_LCTL: world_i_LCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_I_LCTL";
#binding-cells = <0>;
bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_i_RCTL: world_i_RCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_I_RCTL";
#binding-cells = <0>;
bindings = <&world_i_circumflex>, <&world_i_grave>;
mods = <(MOD_RSFT)>;
};
world_e_base: world_e_base {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_BASE";
#binding-cells = <0>;
bindings = <&world_e_acute>, <&world_e_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_e_RALT: world_e_RALT {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_RALT";
#binding-cells = <0>;
bindings = <&world_e_ae>, <&world_e_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_e_LCTL: world_e_LCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_LCTL";
#binding-cells = <0>;
bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_e_RCTL: world_e_RCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_E_RCTL";
#binding-cells = <0>;
bindings = <&world_e_circumflex>, <&world_e_grave>;
mods = <(MOD_RSFT)>;
};
world_a_base: world_a_base {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_BASE";
#binding-cells = <0>;
bindings = <&world_a_acute>, <&world_a_LALT>;
mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_a_LALT: world_a_LALT {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_LALT";
#binding-cells = <0>;
bindings = <&world_a_tilde>, <&world_a_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_a_RALT: world_a_RALT {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_RALT";
#binding-cells = <0>;
bindings = <&world_a_ring>, <&world_a_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_a_LCTL: world_a_LCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_LCTL";
#binding-cells = <0>;
bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_a_RCTL: world_a_RCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_A_RCTL";
#binding-cells = <0>;
bindings = <&world_a_circumflex>, <&world_a_grave>;
mods = <(MOD_RSFT)>;
};
world_y_base: world_y_base {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_Y_BASE";
#binding-cells = <0>;
bindings = <&world_y_acute>, <&world_y_diaeresis>;
mods = <(MOD_LCTL)>;
};
world_o_base: world_o_base {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_BASE";
#binding-cells = <0>;
bindings = <&world_o_acute>, <&world_o_LALT>;
mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_o_LALT: world_o_LALT {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_LALT";
#binding-cells = <0>;
bindings = <&world_o_tilde>, <&world_o_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_o_RALT: world_o_RALT {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_RALT";
#binding-cells = <0>;
bindings = <&world_o_slash>, <&world_o_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_o_LCTL: world_o_LCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_LCTL";
#binding-cells = <0>;
bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_o_RCTL: world_o_RCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_O_RCTL";
#binding-cells = <0>;
bindings = <&world_o_circumflex>, <&world_o_grave>;
mods = <(MOD_RSFT)>;
};
world_u_base: world_u_base {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_U_BASE";
#binding-cells = <0>;
bindings = <&world_u_acute>, <&world_u_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_u_LCTL: world_u_LCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_U_LCTL";
#binding-cells = <0>;
bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_u_RCTL: world_u_RCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_U_RCTL";
#binding-cells = <0>;
bindings = <&world_u_circumflex>, <&world_u_grave>;
mods = <(MOD_RSFT)>;
};
world_quotes_base: world_quotes_base {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_BASE";
#binding-cells = <0>;
bindings = <&world_quotes_plain>, <&world_quotes_LALT>;
mods = <(MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_LALT: world_quotes_LALT {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_LALT";
#binding-cells = <0>;
bindings = <&world_quotes_angle>, <&world_quotes_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_LCTL: world_quotes_LCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_LCTL";
#binding-cells = <0>;
bindings = <&world_quotes_curly2>, <&world_quotes_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_quotes_RCTL: world_quotes_RCTL {
compatible = "zmk,behavior-mod-morph";
label = "WORLD_QUOTES_RCTL";
#binding-cells = <0>;
bindings = <&world_quotes_curly1>, <&world_quotes_grave>;
mods = <(MOD_RSFT)>;
};
#ifndef EMOJI_GENDER_SIGN_PRESET
#define EMOJI_GENDER_SIGN_PRESET 1 
#endif
#ifndef EMOJI_SKIN_TONE_PRESET
#define EMOJI_SKIN_TONE_PRESET 4 
#endif
#ifndef EMOJI_HAIR_STYLE_PRESET
#define EMOJI_HAIR_STYLE_PRESET 4 
#endif
UNICODE(emoji_zwj, /* ‍ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N0 &kp N0 &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N0 &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N0 &kp D>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_male_sign, /* ♂️ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N6 &kp N4 &kp N2 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N4 &kp N2>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N4 &kp KP_N2>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_female_sign, /* ♀️ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N6 &kp N4 &kp N0 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N4 &kp N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N4 &kp KP_N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_right_arrow, /* ➡️ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N7 &kp A &kp N1 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp A &kp N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp A &kp KP_N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_left_arrow, /* ⬅️ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp B &kp N0 &kp N5 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp B &kp N0 &kp N5>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp B &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_light_skin_tone, /* 🏻 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp B>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_medium_light_skin_tone, /* 🏼 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_medium_skin_tone, /* 🏽 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp D>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_medium_dark_skin_tone, /* 🏾 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp E &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp E>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp E>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_dark_skin_tone, /* 🏿 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_baby_bottle, /* 🍼 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N7 &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N7 &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N7 &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_baby, /* 👶 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_boy, /* 👦 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_girl, /* 👧 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_man, /* 👨 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_woman, /* 👩 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_old_man, /* 👴 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_old_woman, /* 👵 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_white_hair, /* 🦳 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_curly_hair, /* 🦱 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_red_hair, /* 🦰 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_bald, /* 🦲 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_new_moon, /* 🌑 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_waxing_crescent_moon, /* 🌒 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_first_quarter_moon, /* 🌓 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_waxing_gibbous_moon, /* 🌔 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_full_moon, /* 🌕 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_tada, /* 🎉 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N8 &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N8 &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N8 &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_fire, /* 🔥 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N5 &kp N2 &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N5 &kp N2 &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N5 &kp KP_N2 &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_heart, /* ️❤️ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp N2 &kp N7 &kp N6 &kp N4 &kp ENTER>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N6 &kp N4>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N6 &kp KP_N4>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_muscle, /* 💪 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp A &kp A &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp A &kp A>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp A &kp A>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_person_climbing, /* 🧗 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp D &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp D &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp D &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_rocket, /* 🚀 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N8 &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N8 &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N8 &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_sunglasses, /* 😎 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp E &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp E>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp E>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_star_struck, /* 🤩 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N2 &kp N9 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N2 &kp N9>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N2 &kp KP_N9>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_joy, /* 😂 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp N2 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp N2>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp KP_N2>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_cold_sweat, /* 😰 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N3 &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N3 &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N3 &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_scream, /* 😱 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N3 &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N3 &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N3 &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_exploding_head, /* 🤯 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N2 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N2 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N2 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_snap_fingers, /* 🫰 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp A &kp F &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp A &kp F &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp A &kp F &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_ok_hand, /* 👌 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N4 &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N4 &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_pray, /* 🙏 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_sweat_smile, /* 😅 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_disappointed, /* 😞 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N1 &kp E &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N1 &kp E>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N1 &kp E>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_thinking, /* 🤔 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N1 &kp N4 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N1 &kp N4>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N1 &kp KP_N4>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_person_tipping_hand, /* 💁 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N8 &kp N1 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N8 &kp N1>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N8 &kp KP_N1>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_person_gesturing_ok, /* 🙆 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N6 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N6>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N6>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_person_bowing, /* 🙇 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_person_raising_hand, /* 🙋 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp B &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp B>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp B>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_person_gesturing_no, /* 🙅 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_person_shrugging, /* 🤷 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N3 &kp N7 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N3 &kp N7>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N3 &kp KP_N7>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_checkoff, /* ✅ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N7 &kp N0 &kp N5 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N0 &kp N5>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_100, /* 💯 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp A &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp A &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp A &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_warning, /* ⚠️ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N6 &kp A &kp N0 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp A &kp N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp A &kp KP_N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_x, /* ❌ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N7 &kp N4 &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N4 &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_question, /* ❓ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N7 &kp N5 &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N5 &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N5 &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_astronaut, /* 🧑‍🚀 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp D &kp N1 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp N2 &kp N0 &kp N0 &kp D &kp ENTER>, <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N8 &kp N0 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp D &kp N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N0 &kp D>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N8 &kp N0>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp D &kp KP_N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N0 &kp D>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N8 &kp KP_N0>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_nerd, /* 🤓 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N1 &kp N3 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N1 &kp N3>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N1 &kp KP_N3>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_sparkles, /* ✨ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N7 &kp N2 &kp N8 &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N2 &kp N8>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N2 &kp KP_N8>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_raised_hands, /* 🙌 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp C &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp C>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_point_up, /* ☝️ */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N2 &kp N6 &kp N1 &kp D &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N1 &kp D>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N1 &kp D>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
#endif
)
UNICODE(emoji_thumbs_up, /* 👍 */
#if UNICODE_TARGET_OS == 1
<&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N4 &kp D &kp ENTER>
#elif UNICODE_TARGET_OS == 2
<&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N4 &kp D>, <&macro_release &kp LALT>
#elif UNICODE_TARGET_OS == 3
<&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N4 &kp D>, <&macro_release &kp LALT>
#endif
)
};
/*HACK*/};
#if EMOJI_GENDER_SIGN_PRESET == 0
emoji_gender_sign_preset: &none {};
#elif EMOJI_GENDER_SIGN_PRESET == 1
emoji_gender_sign_preset: &emoji_male_sign {};
#elif EMOJI_GENDER_SIGN_PRESET == 2
emoji_gender_sign_preset: &emoji_female_sign {};
#endif
#if EMOJI_SKIN_TONE_PRESET == 0
emoji_skin_tone_preset: &none {};
#elif EMOJI_SKIN_TONE_PRESET == 1
emoji_skin_tone_preset: &emoji_light_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 2
emoji_skin_tone_preset: &emoji_medium_light_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 3
emoji_skin_tone_preset: &emoji_medium_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 4
emoji_skin_tone_preset: &emoji_medium_dark_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 5
emoji_skin_tone_preset: &emoji_dark_skin_tone {};
#endif
#if EMOJI_HAIR_STYLE_PRESET == 0
emoji_hair_style_preset: &none {};
#elif EMOJI_HAIR_STYLE_PRESET == 1
emoji_hair_style_preset: &emoji_bald {};
#elif EMOJI_HAIR_STYLE_PRESET == 2
emoji_hair_style_preset: &emoji_red_hair {};
#elif EMOJI_HAIR_STYLE_PRESET == 3
emoji_hair_style_preset: &emoji_curly_hair {};
#elif EMOJI_HAIR_STYLE_PRESET == 4
emoji_hair_style_preset: &emoji_white_hair {};
#endif
/*HACK*//{
#ifndef MOUSE_MOTION_DELAY
#define MOUSE_MOTION_DELAY 0
#endif
#ifndef MOUSE_MOTION_ACCELERATION_EXPONENT
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1
#endif
#ifndef MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300
#endif
#ifndef MOUSE_MOTION_MAXIMUM_SPEED
#define MOUSE_MOTION_MAXIMUM_SPEED 600
#endif
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 300
#endif
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 10
#endif
/*HACK*/};
#ifdef ENABLE_MOUSE_KEYS
#define ZMK_MOUSE_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#define ZMK_MOUSE_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED
#include <dt-bindings/zmk/mouse.h>
&mmv {
delay-ms = <MOUSE_MOTION_DELAY>;
acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};
&msc {
delay-ms = <MOUSE_SCROLL_DELAY>;
acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};
#else
#define mkp none
#define mmv none
#define msc none
#define LCLK
#define MCLK
#define RCLK
#define MB1
#define MB2
#define MB3
#define MB4
#define MB5
#define MB6
#define MB7
#define MB8
#define MOVE_UP
#define MOVE_DOWN
#define MOVE_LEFT
#define MOVE_RIGHT
#define SCRL_UP
#define SCRL_DOWN
#define SCRL_LEFT
#define SCRL_RIGHT
#endif
/*HACK*//{
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Engrammer {
            bindings = <
               &kp F1               &kp F2               &kp F3               &kp F4                  &kp F5                                                                                                                                                                                                                  &kp F6                &kp F7                &kp F8                &kp F9               &kp F10
            &kp EQUAL               &kp N1               &kp N2               &kp N3                  &kp N4                     &kp N5                                                                                                                                                     &kp N6                            &kp N7                &kp N8                &kp N9                &kp N0              &kp BSLH
            &kp GRAVE                &kp B  &LeftRing2 (RALT,Y)                &kp O                   &kp U                    &kp SQT                                                                                                                                                   &kp SEMI                             &kp L                 &kp D  &RightRing2 (RALT,W)                 &kp V                 &kp Z
    &cappy CAPSLOCK 0  &LeftPinky (LGUI,C)  &LeftRing1 (LALT,I)  &LeftMiddy (LCTL,E)     &LeftIndex (LSFT,A)  &plain LAYER_Typing COMMA                                                                                                                                    &plain LAYER_Typing DOT              &RightIndex (LSFT,H)  &RightMiddy (LCTL,T)  &RightRing1 (LALT,S)  &RightPinky (LGUI,N)                 &kp Q
            &kp LSHFT                &kp G                &kp X                &kp J                   &kp K                  &kp MINUS      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER                 &kp FSLH                             &kp R                 &kp M                 &kp F                 &kp P             &kp RSHFT
 &magic LAYER_Magic 0             &kp HOME            &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END                             &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE                           &thumb_parang_left LAYER_World 0              &kp LBKT              &kp RBKT         &parang_right  &magic LAYER_Magic 0
            >;
        };

        layer_Engram {
            bindings = <
               &kp F1               &kp F2               &kp F3               &kp F4                  &kp F5                                                                                                                                                                                                                                    &kp F6                &kp F7                &kp F8                &kp F9               &kp F10
             &kp LBKT           &engram_N1           &engram_N2           &engram_N3              &engram_N4                          &engram_N5                                                                                                                                                          &engram_N6                        &engram_N7            &engram_N8            &engram_N9            &engram_N0              &kp RBKT
           &engram_AT                &kp B  &LeftRing2 (RALT,Y)                &kp O                   &kp U                         &engram_SQT                                                                                                                                                         &engram_DQT                             &kp L                 &kp D  &RightRing2 (RALT,W)                 &kp V                 &kp Z
    &cappy CAPSLOCK 0  &LeftPinky (LGUI,C)  &LeftRing1 (LALT,I)  &LeftMiddy (LCTL,E)     &LeftIndex (LSFT,A)  &plain_engram_COMMA LAYER_Typing 0                                                                                                                                    &plain_engram_DOT LAYER_Typing 0              &RightIndex (LSFT,H)  &RightMiddy (LCTL,T)  &RightRing1 (LALT,S)  &RightPinky (LGUI,N)                 &kp Q
            &kp LSHFT                &kp G                &kp X                &kp J                   &kp K                           &kp MINUS      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER                     &engram_QMARK                             &kp R                 &kp M                 &kp F                 &kp P             &kp RSHFT
 &magic LAYER_Magic 0             &kp HOME            &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END                                      &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE                                    &thumb_parang_left LAYER_World 0          &engram_HASH          &engram_FSLH         &parang_right  &magic LAYER_Magic 0
            >;
        };

        layer_Dvorak {
            bindings = <
               &kp F1               &kp F2                   &kp F3               &kp F4                  &kp F5                                                                                                                                                                                                            &kp F6                &kp F7                &kp F8                &kp F9               &kp F10
            &kp EQUAL               &kp N1                   &kp N2               &kp N3                  &kp N4                 &kp N5                                                                                                                                                   &kp N6                            &kp N7                &kp N8                &kp N9                &kp N0              &kp BSLH
            &kp GRAVE              &kp SQT  &LeftRing2 (RALT,COMMA)              &kp DOT                   &kp P                  &kp Y                                                                                                                                                    &kp F                             &kp G                 &kp C  &RightRing2 (RALT,R)                 &kp L             &kp SLASH
    &cappy CAPSLOCK 0  &LeftPinky (LGUI,A)      &LeftRing1 (LALT,O)  &LeftMiddy (LCTL,E)     &LeftIndex (LSFT,U)  &plain LAYER_Typing I                                                                                                                                    &plain LAYER_Typing D              &RightIndex (LSFT,H)  &RightMiddy (LCTL,T)  &RightRing1 (LALT,N)  &RightPinky (LGUI,S)             &kp MINUS
            &kp LSHFT             &kp SEMI                    &kp Q                &kp J                   &kp K                  &kp X      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER                  &kp B                             &kp M                 &kp W                 &kp V                 &kp Z             &kp RSHFT
 &magic LAYER_Magic 0             &kp HOME                &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END                         &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE                         &thumb_parang_left LAYER_World 0              &kp LBKT              &kp RBKT         &parang_right  &magic LAYER_Magic 0
            >;
        };

        layer_Workman {
            bindings = <
               &kp F1               &kp F2               &kp F3               &kp F4                  &kp F5                                                                                                                                                                                                            &kp F6                &kp F7                &kp F8                &kp F9               &kp F10
            &kp EQUAL               &kp N1               &kp N2               &kp N3                  &kp N4                 &kp N5                                                                                                                                                   &kp N6                            &kp N7                &kp N8                &kp N9                &kp N0              &kp BSLH
            &kp GRAVE                &kp Q  &LeftRing2 (RALT,D)                &kp R                   &kp W                  &kp B                                                                                                                                                    &kp J                             &kp F                 &kp U  &RightRing2 (RALT,P)              &kp SEMI             &kp MINUS
    &cappy CAPSLOCK 0  &LeftPinky (LGUI,A)  &LeftRing1 (LALT,S)  &LeftMiddy (LCTL,H)     &LeftIndex (LSFT,T)  &plain LAYER_Typing G                                                                                                                                    &plain LAYER_Typing Y              &RightIndex (LSFT,N)  &RightMiddy (LCTL,E)  &RightRing1 (LALT,O)  &RightPinky (LGUI,I)               &kp SQT
            &kp LSHFT                &kp Z                &kp X                &kp M                   &kp C                  &kp V      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER                  &kp K                             &kp L             &kp COMMA               &kp DOT              &kp FSLH             &kp RSHFT
 &magic LAYER_Magic 0             &kp HOME            &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END                         &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE                         &thumb_parang_left LAYER_World 0              &kp LBKT              &kp RBKT         &parang_right  &magic LAYER_Magic 0
            >;
        };

        layer_Colemak {
            bindings = <
               &kp F1               &kp F2               &kp F3               &kp F4                  &kp F5                                                                                                                                                                                                            &kp F6                &kp F7                &kp F8                &kp F9               &kp F10
            &kp EQUAL               &kp N1               &kp N2               &kp N3                  &kp N4                 &kp N5                                                                                                                                                   &kp N6                            &kp N7                &kp N8                &kp N9                &kp N0              &kp BSLH
            &kp GRAVE                &kp Q  &LeftRing2 (RALT,W)                &kp F                   &kp P                  &kp G                                                                                                                                                    &kp J                             &kp L                 &kp U  &RightRing2 (RALT,Y)              &kp SEMI             &kp MINUS
    &cappy CAPSLOCK 0  &LeftPinky (LGUI,A)  &LeftRing1 (LALT,R)  &LeftMiddy (LCTL,S)     &LeftIndex (LSFT,T)  &plain LAYER_Typing D                                                                                                                                    &plain LAYER_Typing H              &RightIndex (LSFT,N)  &RightMiddy (LCTL,E)  &RightRing1 (LALT,I)  &RightPinky (LGUI,O)               &kp SQT
            &kp LSHFT                &kp Z                &kp X                &kp C                   &kp V                  &kp B      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER                  &kp K                             &kp M             &kp COMMA               &kp DOT              &kp FSLH             &kp RSHFT
 &magic LAYER_Magic 0             &kp HOME            &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END                         &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE                         &thumb_parang_left LAYER_World 0              &kp LBKT              &kp RBKT         &parang_right  &magic LAYER_Magic 0
            >;
        };

        layer_QWERTY {
            bindings = <
               &kp F1               &kp F2               &kp F3               &kp F4                  &kp F5                                                                                                                                                                                                            &kp F6                &kp F7                &kp F8                   &kp F9               &kp F10
            &kp EQUAL               &kp N1               &kp N2               &kp N3                  &kp N4                 &kp N5                                                                                                                                                   &kp N6                            &kp N7                &kp N8                &kp N9                   &kp N0              &kp BSLH
            &kp GRAVE                &kp Q  &LeftRing2 (RALT,W)                &kp E                   &kp R                  &kp T                                                                                                                                                    &kp Y                             &kp U                 &kp I  &RightRing2 (RALT,O)                    &kp P             &kp MINUS
    &cappy CAPSLOCK 0  &LeftPinky (LGUI,A)  &LeftRing1 (LALT,S)  &LeftMiddy (LCTL,D)     &LeftIndex (LSFT,F)  &plain LAYER_Typing G                                                                                                                                    &plain LAYER_Typing H              &RightIndex (LSFT,J)  &RightMiddy (LCTL,K)  &RightRing1 (LALT,L)  &RightPinky (LGUI,SEMI)               &kp SQT
            &kp LSHFT                &kp Z                &kp X                &kp C                   &kp V                  &kp B      &thumb LAYER_Function ESC                      &kp UP  &kp DOWN  &kp LEFT               &kp RIGHT  &thumb LAYER_System ENTER                  &kp N                             &kp M             &kp COMMA               &kp DOT                 &kp FSLH             &kp RSHFT
 &magic LAYER_Magic 0             &kp HOME            &kp PG_UP            &kp PG_DN  &thumb LAYER_Emoji END                         &thumb LAYER_Cursor BACKSPACE  &thumb LAYER_Number DELETE    &lower    &lower  &thumb LAYER_Mouse TAB  &space LAYER_Symbol SPACE                         &thumb_parang_left LAYER_World 0              &kp LBKT              &kp RBKT            &parang_right  &magic LAYER_Magic 0
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT          &kp C_PP                                                                                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none       &kp PAUSE_BREAK
               &trans         &none           &none           &none             &none   &kp HOME                                                                                                                         &kp LPAR        &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY       &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW             &none    &kp END                                                                                                                         &kp RPAR         &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS        &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW   &kp RIGHT_ARROW  &kp PG_UP                                                                                                                      &kp PERCENT         &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &kp KP_NUM
             &kp LALT     &kp K_APP           &none         &kp F11           &kp F12  &kp PG_DN  &tog LAYER_Function  &tog LAYER_Gaming  &tog LAYER_Typing  &tog LAYER_Typing  &tog LAYER_Gaming  &tog LAYER_System    &kp COMMA         &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER              &kp LALT
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11  &tog LAYER_Emoji               &tog LAYER_Cursor  &tog LAYER_Number   &tog LAYER_Lower   &tog LAYER_Lower   &tog LAYER_Mouse  &tog LAYER_Symbol               &tog LAYER_World     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER  &magic LAYER_Magic 0
            >;
        };

        layer_Typing {
            bindings = <
 &trans              &trans              &trans              &trans              &trans                                                                                                                              &trans               &trans               &trans               &trans  &trans
 &trans              &trans              &trans              &trans              &trans           &trans                                                                                        &trans               &trans               &trans               &trans               &trans  &trans
 &trans              &trans  &kp LEFT_RING2_KEY              &trans              &trans           &trans                                                                                        &trans               &trans               &trans  &kp RIGHT_RING2_KEY               &trans  &trans
 &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RING1_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &kp KEY_LH_C1R4                                                                               &kp KEY_RH_C1R4  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RING1_KEY  &kp RIGHT_PINKY_KEY  &trans
 &trans              &trans              &trans              &trans              &trans           &trans   &kp ESC   &trans             &trans             &trans   &trans    &kp RET           &trans               &trans               &trans               &trans               &trans  &trans
 &trans              &trans              &trans              &trans              &trans                   &kp BSPC  &kp DEL  &tog LAYER_Typing  &tog LAYER_Typing  &kp TAB  &kp SPACE                                &trans               &trans               &trans               &trans  &trans
            >;
        };

        layer_LeftPinky {
            bindings = <
 &left_pinky_tap KEY_LH_C6R1  &left_pinky_tap KEY_LH_C5R1  &left_pinky_tap KEY_LH_C4R1  &left_pinky_tap KEY_LH_C3R1  &left_pinky_tap KEY_LH_C2R1                                                                                                             &trans               &trans               &trans               &trans  &trans
 &left_pinky_tap KEY_LH_C6R2  &left_pinky_tap KEY_LH_C5R2  &left_pinky_tap KEY_LH_C4R2  &left_pinky_tap KEY_LH_C3R2  &left_pinky_tap KEY_LH_C2R2  &left_pinky_tap KEY_LH_C1R2                                                           &trans               &trans               &trans               &trans               &trans  &trans
 &left_pinky_tap KEY_LH_C6R3  &left_pinky_tap KEY_LH_C5R3              &LeftPinkyRing2  &left_pinky_tap KEY_LH_C3R3  &left_pinky_tap KEY_LH_C2R3  &left_pinky_tap KEY_LH_C1R3                                                           &trans               &trans               &trans  &kp RIGHT_RING2_KEY               &trans  &trans
 &left_pinky_tap KEY_LH_C6R4                        &none              &LeftPinkyRing1              &LeftPinkyMiddy              &LeftPinkyIndex  &left_pinky_tap KEY_LH_C1R4                                                  &kp KEY_RH_C1R4  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RING1_KEY  &kp RIGHT_PINKY_KEY  &trans
 &left_pinky_tap KEY_LH_C6R5  &left_pinky_tap KEY_LH_C5R5  &left_pinky_tap KEY_LH_C4R5  &left_pinky_tap KEY_LH_C3R5  &left_pinky_tap KEY_LH_C2R5  &left_pinky_tap KEY_LH_C1R5  &trans  &trans  &trans  &trans  &trans  &trans           &trans               &trans               &trans               &trans               &trans  &trans
                      &trans  &left_pinky_tap KEY_LH_C5R6  &left_pinky_tap KEY_LH_C4R6  &left_pinky_tap KEY_LH_C3R6  &left_pinky_tap KEY_LH_C2R6                               &trans  &trans  &trans  &trans  &trans  &trans                                &trans               &trans               &trans               &trans  &trans
            >;
        };

        layer_LeftRing1 {
            bindings = <
 &left_ring1_tap KEY_LH_C6R1  &left_ring1_tap KEY_LH_C5R1  &left_ring1_tap KEY_LH_C4R1  &left_ring1_tap KEY_LH_C3R1  &left_ring1_tap KEY_LH_C2R1                                                                                                             &trans               &trans               &trans               &trans  &trans
 &left_ring1_tap KEY_LH_C6R2  &left_ring1_tap KEY_LH_C5R2  &left_ring1_tap KEY_LH_C4R2  &left_ring1_tap KEY_LH_C3R2  &left_ring1_tap KEY_LH_C2R2  &left_ring1_tap KEY_LH_C1R2                                                           &trans               &trans               &trans               &trans               &trans  &trans
 &left_ring1_tap KEY_LH_C6R3  &left_ring1_tap KEY_LH_C5R3              &LeftRing1Ring2  &left_ring1_tap KEY_LH_C3R3  &left_ring1_tap KEY_LH_C2R3  &left_ring1_tap KEY_LH_C1R3                                                           &trans               &trans               &trans  &kp RIGHT_RING2_KEY               &trans  &trans
 &left_ring1_tap KEY_LH_C6R4              &LeftRing1Pinky                        &none              &LeftRing1Middy              &LeftRing1Index  &left_ring1_tap KEY_LH_C1R4                                                  &kp KEY_RH_C1R4  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RING1_KEY  &kp RIGHT_PINKY_KEY  &trans
 &left_ring1_tap KEY_LH_C6R5  &left_ring1_tap KEY_LH_C5R5  &left_ring1_tap KEY_LH_C4R5  &left_ring1_tap KEY_LH_C3R5  &left_ring1_tap KEY_LH_C2R5  &left_ring1_tap KEY_LH_C1R5  &trans  &trans  &trans  &trans  &trans  &trans           &trans               &trans               &trans               &trans               &trans  &trans
                      &trans  &left_ring1_tap KEY_LH_C5R6  &left_ring1_tap KEY_LH_C4R6  &left_ring1_tap KEY_LH_C3R6  &left_ring1_tap KEY_LH_C2R6                               &trans  &trans  &trans  &trans  &trans  &trans                                &trans               &trans               &trans               &trans  &trans
            >;
        };

        layer_LeftRing2 {
            bindings = <
 &left_ring2_tap KEY_LH_C6R1  &left_ring2_tap KEY_LH_C5R1  &left_ring2_tap KEY_LH_C4R1  &left_ring2_tap KEY_LH_C3R1  &left_ring2_tap KEY_LH_C2R1                                                                                                             &trans               &trans               &trans               &trans  &trans
 &left_ring2_tap KEY_LH_C6R2  &left_ring2_tap KEY_LH_C5R2  &left_ring2_tap KEY_LH_C4R2  &left_ring2_tap KEY_LH_C3R2  &left_ring2_tap KEY_LH_C2R2  &left_ring2_tap KEY_LH_C1R2                                                           &trans               &trans               &trans               &trans               &trans  &trans
 &left_ring2_tap KEY_LH_C6R3  &left_ring2_tap KEY_LH_C5R3                        &none  &left_ring2_tap KEY_LH_C3R3  &left_ring2_tap KEY_LH_C2R3  &left_ring2_tap KEY_LH_C1R3                                                           &trans               &trans               &trans  &kp RIGHT_RING2_KEY               &trans  &trans
 &left_ring2_tap KEY_LH_C6R4              &LeftRing2Pinky              &LeftRing2Ring1              &LeftRing2Middy              &LeftRing2Index  &left_ring2_tap KEY_LH_C1R4                                                  &kp KEY_RH_C1R4  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RING1_KEY  &kp RIGHT_PINKY_KEY  &trans
 &left_ring2_tap KEY_LH_C6R5  &left_ring2_tap KEY_LH_C5R5  &left_ring2_tap KEY_LH_C4R5  &left_ring2_tap KEY_LH_C3R5  &left_ring2_tap KEY_LH_C2R5  &left_ring2_tap KEY_LH_C1R5  &trans  &trans  &trans  &trans  &trans  &trans           &trans               &trans               &trans               &trans               &trans  &trans
                      &trans  &left_ring2_tap KEY_LH_C5R6  &left_ring2_tap KEY_LH_C4R6  &left_ring2_tap KEY_LH_C3R6  &left_ring2_tap KEY_LH_C2R6                               &trans  &trans  &trans  &trans  &trans  &trans                                &trans               &trans               &trans               &trans  &trans
            >;
        };

        layer_LeftMiddy {
            bindings = <
 &left_middy_tap KEY_LH_C6R1  &left_middy_tap KEY_LH_C5R1  &left_middy_tap KEY_LH_C4R1  &left_middy_tap KEY_LH_C3R1  &left_middy_tap KEY_LH_C2R1                                                                                                             &trans               &trans               &trans               &trans  &trans
 &left_middy_tap KEY_LH_C6R2  &left_middy_tap KEY_LH_C5R2  &left_middy_tap KEY_LH_C4R2  &left_middy_tap KEY_LH_C3R2  &left_middy_tap KEY_LH_C2R2  &left_middy_tap KEY_LH_C1R2                                                           &trans               &trans               &trans               &trans               &trans  &trans
 &left_middy_tap KEY_LH_C6R3  &left_middy_tap KEY_LH_C5R3              &LeftMiddyRing2  &left_middy_tap KEY_LH_C3R3  &left_middy_tap KEY_LH_C2R3  &left_middy_tap KEY_LH_C1R3                                                           &trans               &trans               &trans  &kp RIGHT_RING2_KEY               &trans  &trans
 &left_middy_tap KEY_LH_C6R4              &LeftMiddyPinky              &LeftMiddyRing1                        &none              &LeftMiddyIndex  &left_middy_tap KEY_LH_C1R4                                                  &kp KEY_RH_C1R4  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RING1_KEY  &kp RIGHT_PINKY_KEY  &trans
 &left_middy_tap KEY_LH_C6R5  &left_middy_tap KEY_LH_C5R5  &left_middy_tap KEY_LH_C4R5  &left_middy_tap KEY_LH_C3R5  &left_middy_tap KEY_LH_C2R5  &left_middy_tap KEY_LH_C1R5  &trans  &trans  &trans  &trans  &trans  &trans           &trans               &trans               &trans               &trans               &trans  &trans
                      &trans  &left_middy_tap KEY_LH_C5R6  &left_middy_tap KEY_LH_C4R6  &left_middy_tap KEY_LH_C3R6  &left_middy_tap KEY_LH_C2R6                               &trans  &trans  &trans  &trans  &trans  &trans                                &trans               &trans               &trans               &trans  &trans
            >;
        };

        layer_LeftIndex {
            bindings = <
 &left_index_tap KEY_LH_C6R1  &left_index_tap KEY_LH_C5R1  &left_index_tap KEY_LH_C4R1  &left_index_tap KEY_LH_C3R1  &left_index_tap KEY_LH_C2R1                                                                                                             &trans               &trans               &trans               &trans  &trans
 &left_index_tap KEY_LH_C6R2  &left_index_tap KEY_LH_C5R2  &left_index_tap KEY_LH_C4R2  &left_index_tap KEY_LH_C3R2  &left_index_tap KEY_LH_C2R2  &left_index_tap KEY_LH_C1R2                                                           &trans               &trans               &trans               &trans               &trans  &trans
 &left_index_tap KEY_LH_C6R3  &left_index_tap KEY_LH_C5R3              &LeftIndexRing2  &left_index_tap KEY_LH_C3R3  &left_index_tap KEY_LH_C2R3  &left_index_tap KEY_LH_C1R3                                                           &trans               &trans               &trans  &kp RIGHT_RING2_KEY               &trans  &trans
 &left_index_tap KEY_LH_C6R4              &LeftIndexPinky              &LeftIndexRing1              &LeftIndexMiddy                        &none  &left_index_tap KEY_LH_C1R4                                                  &kp KEY_RH_C1R4  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RING1_KEY  &kp RIGHT_PINKY_KEY  &trans
 &left_index_tap KEY_LH_C6R5  &left_index_tap KEY_LH_C5R5  &left_index_tap KEY_LH_C4R5  &left_index_tap KEY_LH_C3R5  &left_index_tap KEY_LH_C2R5  &left_index_tap KEY_LH_C1R5  &trans  &trans  &trans  &trans  &trans  &trans           &trans               &trans               &trans               &trans               &trans  &trans
                      &trans  &left_index_tap KEY_LH_C5R6  &left_index_tap KEY_LH_C4R6  &left_index_tap KEY_LH_C3R6  &left_index_tap KEY_LH_C2R6                               &trans  &trans  &trans  &trans  &trans  &trans                                &trans               &trans               &trans               &trans  &trans
            >;
        };

        layer_RightPinky {
            bindings = <
 &trans              &trans              &trans              &trans              &trans                                                                                                 &right_pinky_tap KEY_RH_C2R1  &right_pinky_tap KEY_RH_C3R1  &right_pinky_tap KEY_RH_C4R1  &right_pinky_tap KEY_RH_C5R1  &right_pinky_tap KEY_RH_C6R1
 &trans              &trans              &trans              &trans              &trans           &trans                                                  &right_pinky_tap KEY_RH_C1R2  &right_pinky_tap KEY_RH_C2R2  &right_pinky_tap KEY_RH_C3R2  &right_pinky_tap KEY_RH_C4R2  &right_pinky_tap KEY_RH_C5R2  &right_pinky_tap KEY_RH_C6R2
 &trans              &trans  &kp LEFT_RING2_KEY              &trans              &trans           &trans                                                  &right_pinky_tap KEY_RH_C1R3  &right_pinky_tap KEY_RH_C2R3  &right_pinky_tap KEY_RH_C3R3              &RightPinkyRing2  &right_pinky_tap KEY_RH_C5R3  &right_pinky_tap KEY_RH_C6R3
 &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RING1_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &kp KEY_LH_C1R4                                                  &right_pinky_tap KEY_RH_C1R4              &RightPinkyIndex              &RightPinkyMiddy              &RightPinkyRing1                         &none  &right_pinky_tap KEY_RH_C6R4
 &trans              &trans              &trans              &trans              &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &right_pinky_tap KEY_RH_C1R5  &right_pinky_tap KEY_RH_C2R5  &right_pinky_tap KEY_RH_C3R5  &right_pinky_tap KEY_RH_C4R5  &right_pinky_tap KEY_RH_C5R5  &right_pinky_tap KEY_RH_C6R5
 &trans              &trans              &trans              &trans              &trans                   &trans  &trans  &trans  &trans  &trans  &trans                                &right_pinky_tap KEY_RH_C2R6  &right_pinky_tap KEY_RH_C3R6  &right_pinky_tap KEY_RH_C4R6  &right_pinky_tap KEY_RH_C5R6                        &trans
            >;
        };

        layer_RightRing1 {
            bindings = <
 &trans              &trans              &trans              &trans              &trans                                                                                                 &right_ring1_tap KEY_RH_C2R1  &right_ring1_tap KEY_RH_C3R1  &right_ring1_tap KEY_RH_C4R1  &right_ring1_tap KEY_RH_C5R1  &right_ring1_tap KEY_RH_C6R1
 &trans              &trans              &trans              &trans              &trans           &trans                                                  &right_ring1_tap KEY_RH_C1R2  &right_ring1_tap KEY_RH_C2R2  &right_ring1_tap KEY_RH_C3R2  &right_ring1_tap KEY_RH_C4R2  &right_ring1_tap KEY_RH_C5R2  &right_ring1_tap KEY_RH_C6R2
 &trans              &trans  &kp LEFT_RING2_KEY              &trans              &trans           &trans                                                  &right_ring1_tap KEY_RH_C1R3  &right_ring1_tap KEY_RH_C2R3  &right_ring1_tap KEY_RH_C3R3              &RightRing1Ring2  &right_ring1_tap KEY_RH_C5R3  &right_ring1_tap KEY_RH_C6R3
 &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RING1_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &kp KEY_LH_C1R4                                                  &right_ring1_tap KEY_RH_C1R4              &RightRing1Index              &RightRing1Middy                         &none              &RightRing1Pinky  &right_ring1_tap KEY_RH_C6R4
 &trans              &trans              &trans              &trans              &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &right_ring1_tap KEY_RH_C1R5  &right_ring1_tap KEY_RH_C2R5  &right_ring1_tap KEY_RH_C3R5  &right_ring1_tap KEY_RH_C4R5  &right_ring1_tap KEY_RH_C5R5  &right_ring1_tap KEY_RH_C6R5
 &trans              &trans              &trans              &trans              &trans                   &trans  &trans  &trans  &trans  &trans  &trans                                &right_ring1_tap KEY_RH_C2R6  &right_ring1_tap KEY_RH_C3R6  &right_ring1_tap KEY_RH_C4R6  &right_ring1_tap KEY_RH_C5R6                        &trans
            >;
        };

        layer_RightRing2 {
            bindings = <
 &trans              &trans              &trans              &trans              &trans                                                                                                 &right_ring2_tap KEY_RH_C2R1  &right_ring2_tap KEY_RH_C3R1  &right_ring2_tap KEY_RH_C4R1  &right_ring2_tap KEY_RH_C5R1  &right_ring2_tap KEY_RH_C6R1
 &trans              &trans              &trans              &trans              &trans           &trans                                                  &right_ring2_tap KEY_RH_C1R2  &right_ring2_tap KEY_RH_C2R2  &right_ring2_tap KEY_RH_C3R2  &right_ring2_tap KEY_RH_C4R2  &right_ring2_tap KEY_RH_C5R2  &right_ring2_tap KEY_RH_C6R2
 &trans              &trans  &kp LEFT_RING2_KEY              &trans              &trans           &trans                                                  &right_ring2_tap KEY_RH_C1R3  &right_ring2_tap KEY_RH_C2R3  &right_ring2_tap KEY_RH_C3R3                         &none  &right_ring2_tap KEY_RH_C5R3  &right_ring2_tap KEY_RH_C6R3
 &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RING1_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &kp KEY_LH_C1R4                                                  &right_ring2_tap KEY_RH_C1R4              &RightRing2Index              &RightRing2Middy              &RightRing2Ring1              &RightRing2Pinky  &right_ring2_tap KEY_RH_C6R4
 &trans              &trans              &trans              &trans              &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &right_ring2_tap KEY_RH_C1R5  &right_ring2_tap KEY_RH_C2R5  &right_ring2_tap KEY_RH_C3R5  &right_ring2_tap KEY_RH_C4R5  &right_ring2_tap KEY_RH_C5R5  &right_ring2_tap KEY_RH_C6R5
 &trans              &trans              &trans              &trans              &trans                   &trans  &trans  &trans  &trans  &trans  &trans                                &right_ring2_tap KEY_RH_C2R6  &right_ring2_tap KEY_RH_C3R6  &right_ring2_tap KEY_RH_C4R6  &right_ring2_tap KEY_RH_C5R6                        &trans
            >;
        };

        layer_RightMiddy {
            bindings = <
 &trans              &trans              &trans              &trans              &trans                                                                                                 &right_middy_tap KEY_RH_C2R1  &right_middy_tap KEY_RH_C3R1  &right_middy_tap KEY_RH_C4R1  &right_middy_tap KEY_RH_C5R1  &right_middy_tap KEY_RH_C6R1
 &trans              &trans              &trans              &trans              &trans           &trans                                                  &right_middy_tap KEY_RH_C1R2  &right_middy_tap KEY_RH_C2R2  &right_middy_tap KEY_RH_C3R2  &right_middy_tap KEY_RH_C4R2  &right_middy_tap KEY_RH_C5R2  &right_middy_tap KEY_RH_C6R2
 &trans              &trans  &kp LEFT_RING2_KEY              &trans              &trans           &trans                                                  &right_middy_tap KEY_RH_C1R3  &right_middy_tap KEY_RH_C2R3  &right_middy_tap KEY_RH_C3R3              &RightMiddyRing2  &right_middy_tap KEY_RH_C5R3  &right_middy_tap KEY_RH_C6R3
 &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RING1_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &kp KEY_LH_C1R4                                                  &right_middy_tap KEY_RH_C1R4              &RightMiddyIndex                         &none              &RightMiddyRing1              &RightMiddyPinky  &right_middy_tap KEY_RH_C6R4
 &trans              &trans              &trans              &trans              &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &right_middy_tap KEY_RH_C1R5  &right_middy_tap KEY_RH_C2R5  &right_middy_tap KEY_RH_C3R5  &right_middy_tap KEY_RH_C4R5  &right_middy_tap KEY_RH_C5R5  &right_middy_tap KEY_RH_C6R5
 &trans              &trans              &trans              &trans              &trans                   &trans  &trans  &trans  &trans  &trans  &trans                                &right_middy_tap KEY_RH_C2R6  &right_middy_tap KEY_RH_C3R6  &right_middy_tap KEY_RH_C4R6  &right_middy_tap KEY_RH_C5R6                        &trans
            >;
        };

        layer_RightIndex {
            bindings = <
 &trans              &trans              &trans              &trans              &trans                                                                                                 &right_index_tap KEY_RH_C2R1  &right_index_tap KEY_RH_C3R1  &right_index_tap KEY_RH_C4R1  &right_index_tap KEY_RH_C5R1  &right_index_tap KEY_RH_C6R1
 &trans              &trans              &trans              &trans              &trans           &trans                                                  &right_index_tap KEY_RH_C1R2  &right_index_tap KEY_RH_C2R2  &right_index_tap KEY_RH_C3R2  &right_index_tap KEY_RH_C4R2  &right_index_tap KEY_RH_C5R2  &right_index_tap KEY_RH_C6R2
 &trans              &trans  &kp LEFT_RING2_KEY              &trans              &trans           &trans                                                  &right_index_tap KEY_RH_C1R3  &right_index_tap KEY_RH_C2R3  &right_index_tap KEY_RH_C3R3              &RightIndexRing2  &right_index_tap KEY_RH_C5R3  &right_index_tap KEY_RH_C6R3
 &trans  &kp LEFT_PINKY_KEY  &kp LEFT_RING1_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &kp KEY_LH_C1R4                                                  &right_index_tap KEY_RH_C1R4                         &none              &RightIndexMiddy              &RightIndexRing1              &RightIndexPinky  &right_index_tap KEY_RH_C6R4
 &trans              &trans              &trans              &trans              &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &right_index_tap KEY_RH_C1R5  &right_index_tap KEY_RH_C2R5  &right_index_tap KEY_RH_C3R5  &right_index_tap KEY_RH_C4R5  &right_index_tap KEY_RH_C5R5  &right_index_tap KEY_RH_C6R5
 &trans              &trans              &trans              &trans              &trans                   &trans  &trans  &trans  &trans  &trans  &trans                                &right_index_tap KEY_RH_C2R6  &right_index_tap KEY_RH_C3R6  &right_index_tap KEY_RH_C4R6  &right_index_tap KEY_RH_C5R6                        &trans
            >;
        };

        layer_Cursor {
            bindings = <
     &none           &none         &none         &none           &none                                                                                                           &none           &none           &none      &none        &none
     &none           &none         &none         &none         &kp DEL     &kp INS                                                                                  &kp INS    &kp DEL           &none           &none      &none        &none
 &kp _C(K)       &sk LSHFT     &kp _REDO     &kp _UNDO        &kp BSPC    &kp _CUT                                                                                 &kp _CUT   &kp BSPC       &kp _UNDO       &kp _REDO  &sk LSHFT    &kp _C(K)
 &kp _C(L)        &kp LGUI      &kp LALT     &kp LCTRL       &kp LSHFT   &kp _COPY                                                                                &kp _COPY   &kp LEFT          &kp UP        &kp DOWN  &kp RIGHT    &kp _C(L)
 &kp _C(J)       &kp _FIND  &select_word  &select_line       &kp _C(A)  &kp _PASTE   &none   &none              &none  &select_none  &extend_line  &extend_word  &kp _PASTE   &kp HOME       &kp PG_UP       &kp PG_DN    &kp END    &kp _C(J)
 &kp _C(H)  &kp _FIND_PREV  &extend_word  &extend_line  &kp _FIND_NEXT               &none   &none  &tog LAYER_Cursor     &kp _C(A)  &select_line  &select_word              &kp _FIND  &kp _FIND_PREV  &kp _FIND_NEXT  &kp _C(H)  &kp LG(DOT)
            >;
        };

        layer_Number {
            bindings = <
      &none     &none     &none      &none      &none                                                                                          &none     &none      &none      &none      &none
      &none     &none     &none      &none      &none   &none                                                                    &kp CARET  &kp HASH  &kp DLLR  &kp TILDE   &kp EXCL   &kp PIPE
      &none     &none     &none      &none      &none   &none                                                                    &kp PRCNT    &kp N7    &kp N8     &kp N9  &kp COLON      &kp K
 &kp KP_NUM  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                                     &kp PLUS    &kp N4    &kp N5     &kp N6  &kp MINUS      &kp J
      &none     &none     &none      &none      &none   &none   &none   &none              &none     &kp LT   &kp GT  &kp EQUAL   &kp STAR    &kp N1    &kp N2     &kp N3   &kp FSLH  &kp LS(G)
      &none     &none     &none      &none      &none           &none   &none  &tog LAYER_Number  &kp COMMA  &kp DOT     &kp N0               &trans    &trans     &trans     &trans     &kp AT
            >;
        };

        layer_Function {
            bindings = <
  &none     &none     &none      &none      &none                                                                                                                 &none         &none         &none          &none           &none
  &none     &none     &none      &none      &none   &none                                                                               &kp C_MEDIA_HOME     &kp C_PLAY    &kp C_PREV    &kp C_NEXT     &kp C_STOP     &kp C_EJECT
  &none     &none     &none      &none      &none   &none                                                                                      &kp K_WWW         &kp F7        &kp F8        &kp F9        &kp F10         &kp F13
  &none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                                                     &kp K_CALC         &kp F4        &kp F5        &kp F6        &kp F11         &kp F14
  &none     &none     &none      &none      &none   &none   &none   &none                &none  &kp C_PREV    &kp C_NEXT      &kp C_PP    &kp C_AL_FILES         &kp F1        &kp F2        &kp F3        &kp F12         &kp F15
  &none     &none     &none      &none      &none           &none   &none  &tog LAYER_Function  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                    &kp C_BRI_MAX  &kp C_BRI_UP  &kp C_BRI_DN  &kp C_BRI_MIN  &kp C_BRI_AUTO
            >;
        };

        layer_Emoji {
            bindings = <
              &none                    &none                          &none                      &none                         &none                                                                                                                                                          &emoji_new_moon  &emoji_waxing_crescent_moon   &emoji_first_quarter_moon  &emoji_waxing_gibbous_moon         &emoji_full_moon
              &none   &emoji_light_skin_tone  &emoji_medium_light_skin_tone    &emoji_medium_skin_tone  &emoji_medium_dark_skin_tone  &emoji_dark_skin_tone                                                                                                           &emoji_tada                &emoji_heart                  &emoji_fire               &emoji_muscle      &emoji_person_climbing            &emoji_rocket
  &emoji_left_arrow              &emoji_bald                &emoji_red_hair          &emoji_curly_hair             &emoji_white_hair     &emoji_right_arrow                                                                                                     &emoji_sunglasses          &emoji_star_struck                   &emoji_joy           &emoji_cold_sweat               &emoji_scream    &emoji_exploding_head
 &emoji_female_sign  &emoji_skin_tone_preset                     &emoji_zwj  &emoji_gender_sign_preset      &emoji_hair_style_preset       &emoji_male_sign                                                                                                   &emoji_snap_fingers              &emoji_ok_hand                  &emoji_pray          &emoji_sweat_smile         &emoji_disappointed          &emoji_thinking
   &emoji_old_woman             &emoji_woman                    &emoji_girl                 &emoji_boy                    &emoji_man         &emoji_old_man   &none   &none             &none     &emoji_astronaut      &emoji_nerd   &emoji_sparkles  &emoji_person_tipping_hand  &emoji_person_gesturing_ok         &emoji_person_bowing  &emoji_person_raising_hand  &emoji_person_gesturing_no  &emoji_person_shrugging
              &none                    &none                    &emoji_baby         &emoji_baby_bottle                         &none                          &none   &none  &tog LAYER_Emoji  &emoji_raised_hands  &emoji_point_up  &emoji_thumbs_up                                         &emoji_checkoff                   &emoji_100              &emoji_warning                    &emoji_x          &emoji_question
            >;
        };

        layer_Symbol {
            bindings = <
     &none      &none      &none      &none     &none                                                                                            &none        &none      &none     &none   &none
     &none  &kp GRAVE   &kp LPAR   &kp RPAR  &kp SEMI  &kp COMMA                                                                      &none      &none        &none      &none     &none   &none
  &kp EXCL   &kp LBRC    &kp SQT    &kp DQT  &kp RBRC  &kp QMARK                                                                     &trans  &kp LSHFT    &kp LCTRL   &kp LALT  &kp LGUI   &none
  &kp HASH  &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR                                                                     &trans   &kp BSPC      &kp TAB  &kp SPACE   &kp RET   &none
 &kp TILDE     &kp LT   &kp PIPE  &kp MINUS    &kp GT   &kp FSLH   &kp BSLH    &kp DOT  &kp STAR              &none   &none   &none  &trans    &kp DEL  &kp LS(TAB)      &none     &none   &none
    &kp AT   &kp AMPS   &kp LBKT   &kp RBKT  &kp PLUS             &kp PRCNT  &kp COLON  &kp SEMI  &tog LAYER_Symbol   &none   &none             &trans       &trans     &trans    &trans   &none
            >;
        };

        layer_Mouse {
            bindings = <
  &none   &none           &none           &none            &none                                                                                      &none      &none     &none     &none   &none
  &none   &none           &none           &none            &none   &none                                                                   &none      &none      &none     &none     &none   &none
  &none   &none  &msc SCRL_LEFT    &mmv MOVE_UP  &msc SCRL_RIGHT   &none                                                                   &none      &none      &none     &none     &none   &none
  &none   &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &none                                                                   &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none
  &none   &none           &none  &msc SCRL_DOWN     &msc SCRL_UP   &none  &mkp MCLK      &none   &none             &none   &none   &none   &none      &none      &none     &none     &none   &none
  &none   &none           &none           &none            &none          &mkp LCLK  &mkp RCLK   &none  &tog LAYER_Mouse   &none   &none              &none      &none     &none     &none   &none
            >;
        };

        layer_System {
            bindings = <
           &none            &none            &none            &none            &none                                                                                                             &none      &none     &none     &none   &none
           &none            &none            &none            &none            &none   &none                                                                                          &none      &none      &none     &none     &none   &none
           &none            &none  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI            &none   &none                                                                                          &none      &none      &none     &none     &none   &none
 &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF   &none                                                                                          &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none
           &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI   &none  &kp _LOCK  &kp _SLEEP       &kp _POWER              &none   &none               &none   &none      &none      &none     &none     &none   &none
           &none            &none            &none            &none            &none          &kp PSCRN    &kp SLCK  &kp PAUSE_BREAK  &tog LAYER_System   &none  &linux_magic_sysrq              &none      &none     &none     &none   &none
            >;
        };

        layer_World {
            bindings = <
          &none                      &none                  &none                 &none                      &none                                                                                                      &none      &none      &none      &none   &none
          &none                      &none                  &none                 &none                      &none               &none                                                                       &none      &none      &none      &none      &none   &none
          &none         &world_degree_sign          &world_y_base         &world_o_base              &world_u_base  &world_quotes_base                                                                       &none      &none   &kp LALT   &kp RALT      &none   &none
 &world_n_tilde           &world_c_cedilla          &world_i_base         &world_e_base              &world_a_base               &none                                                                       &none  &kp LSHFT  &kp LCTRL  &kp RCTRL  &kp RSHFT   &none
          &none  &world_quotes_angle_lower    &world_exclaim_left  &world_question_left  &world_quotes_angle_upper               &none   &none   &none             &none             &none   &none   &none   &none      &none      &none      &none      &none   &none
          &none        &world_section_sign  &world_paragraph_sign      &world_o_ordinal           &world_a_ordinal                       &none   &none  &tog LAYER_World  &tog LAYER_World   &none   &none              &none      &none      &none      &none   &none
            >;
        };

        layer_Gaming {
            bindings = <
    &trans     &trans  &trans  &trans  &trans                                                                                             &trans  &trans     &trans   &trans    &trans
    &trans     &trans  &trans  &trans  &trans   &trans                                                                            &trans  &trans  &trans     &trans   &trans    &trans
 &kp MINUS  &kp GRAVE   &kp B   &kp N   &kp M  &kp SQT                                                                             &kp B   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH
     &kp T    &kp TAB   &kp Q   &kp W   &kp E    &kp R                                                                             &kp T   &kp Y   &kp U      &kp I    &kp O     &kp P
     &kp G  &kp LSHFT   &kp A   &kp S   &kp D    &kp F    &kp ESC   &kp RET  &kp PAUSE_BREAK           &kp BSPC  &kp DEL  &trans   &kp G   &kp H   &kp J      &kp K    &kp L  &kp SEMI
     &kp V  &kp LCTRL   &kp Z   &kp X   &kp C           &kp SPACE  &kp LALT         &kp LGUI  &tog LAYER_Gaming   &trans  &trans          &trans  &trans     &trans   &trans    &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &to 0            &to 1            &to 2            &to 3            &to 4            &to 5                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
