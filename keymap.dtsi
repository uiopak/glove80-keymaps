//////////////////////////////////////////////////////////////////////
// NOTE: Use the `#define` settings below to customize this keymap! //
// You can override them here instead of modifying them down there. //
// /* EXAMPLE: */  #define EMOJI_HAIR_STYLE_PRESET 3 // curly_hair  //
//////////////////////////////////////////////////////////////////////
//
// Sunaku's Keymap v32 -- "Glorious Engrammer"
// - https://github.com/sunaku/glove80-keymaps
//
//////////////////////////////////////////////////////////////////////

//
// OPERATING_SYSTEM defines which operating system you intend to use
// with this keymap, because shortcuts vary across operating systems.
//
// - https://zmk.dev/docs/codes
// - https://en.wikipedia.org/wiki/Table_of_keyboard_shortcuts
//
#ifndef OPERATING_SYSTEM
#define OPERATING_SYSTEM 1 // linux
//#define OPERATING_SYSTEM 2 // macos
//#define OPERATING_SYSTEM 3 // windows
#endif
#if OPERATING_SYSTEM == 2
    #define _C      LG
    #define _REDO   _C(LS(Z))
    #define _POWER  K_POWER
    #define _W      LA
    #define _HOME   _C(LEFT)
    #define _END    _C(RIGHT)
#else
    #define _C      LC
    #define _REDO   _C(Y)
    #define _POWER  C_POWER
    #define _W      _C
    #define _HOME   HOME
    #define _END    END
#endif
#define _SLEEP      C_SLEEP
#if OPERATING_SYSTEM == 3
    #define _LOCK   LG(L)
#elif OPERATING_SYSTEM == 2
    #define _LOCK   _C(LC(Q))
#elif OPERATING_SYSTEM == 1
    #define _LOCK   K_LOCK
#endif
#define _UNDO       _C(Z)
#define _CUT        _C(X)
#define _COPY       _C(C)
#define _PASTE      _C(V)
#define _FIND       _C(F)
#define _FIND_NEXT  _C(G)
#define _FIND_PREV  _C(LS(G))

//
// ENABLE_KEY_REPEAT allows "tap then hold" repetition of the tap portion
// of home row mods and layer access keys.  You can keep this disabled if
// you prefer to use the &plain overlay method of key repetition instead.
//
//#define ENABLE_KEY_REPEAT

//
// Glove80 specific symbol overrides to support non "en-US" locales
//
#define AMPS  LS(N7)
#define AT    LS(N2)
#define CARET LS(N6)
#define COLON LS(SEMI)
#define DLLR  LS(N4)
#define DQT   LS(SQT)
#define EXCL  LS(N1)
#define GT    LS(DOT)
#define HASH  LS(N3)
#define LBRC  LS(LBKT)
#define LPAR  LS(N9)
#define LT    LS(COMMA)
#define PIPE  LS(BSLH)
#define PLUS  LS(EQUAL)
#define PRCNT LS(N5)
#define QMARK LS(FSLH)
#define RBRC  LS(RBKT)
#define RPAR  LS(N0)
#define STAR  LS(N8)
#define TILDE LS(GRAVE)
#define UNDER LS(MINUS)

behaviors {

    //////////////////////////////////////////////////////////////////////////
    //
    // Miryoku layers and home row mods (ported from my QMK endgame)
    // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
    // - https://github.com/urob/zmk-config#timeless-homerow-mods
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the pinky, ring, and middle fingers (which are assigned to Super,
    // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
    //
    #ifndef HOMEY_HOLDING_TYPE
    #define HOMEY_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //
    #ifndef HOMEY_HOLDING_TIME
    #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
    #endif

    //
    // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef HOMEY_STREAK_DECAY
    #define HOMEY_STREAK_DECAY 230
    #endif

    //
    // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef HOMEY_REPEAT_DECAY
    #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for index fingers (which Miryoku assigns to Shift) on home row keys.
    //
    // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // allows faster activation of the Shift modifier (without having to wait
    // for the modified key to be released as the "balanced" flavor requires).
    // Typing streaks and the `hold-trigger-on-release` setting are disabled
    // for the index fingers so as not to hinder their speed and dexterity.
    //
    #ifndef SHIFT_HOLDING_TYPE
    #define SHIFT_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
    // fingers toward the index fingers when activating multiple modifiers
    // because `hold-trigger-on-release` is disabled for the index fingers.
    // Otherwise, you may be surprised that the index fingers' modifier is
    // sent immediately without the rest of your multi-mod chord when you
    // perform outward rolls from your index fingers toward your pinkies.
    //
    #ifndef SHIFT_HOLDING_TIME
    #define SHIFT_HOLDING_TIME 170
    #endif

    //
    // SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef SHIFT_STREAK_DECAY
    #define SHIFT_STREAK_DECAY 130
    #endif

    //
    // SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef SHIFT_REPEAT_DECAY
    #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // PLAIN_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for index fingers (which Miryoku assigns to Shift) on home row keys.
    //
    // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // allows faster activation of the Shift modifier (without having to wait
    // for the modified key to be released as the "balanced" flavor requires).
    // Typing streaks and the `hold-trigger-on-release` setting are disabled
    // for the index fingers so as not to hinder their speed and dexterity.
    //
    #ifndef PLAIN_HOLDING_TYPE
    #define PLAIN_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // PLAIN_HOLDING_TIME defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    #ifndef PLAIN_HOLDING_TIME
    #define PLAIN_HOLDING_TIME 170
    #endif

    //
    // PLAIN_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef PLAIN_STREAK_DECAY
    #define PLAIN_STREAK_DECAY 130
    #endif

    //
    // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the thumbs (which are assigned to 6 layers in the Miryoku system).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
    // activation for the symbol layer (if the tapped symbol key is released
    // while the thumb layer key is still held down) for quicker programming.
    //
    #ifndef THUMB_HOLDING_TYPE
    #define THUMB_HOLDING_TYPE "balanced"
    #endif

    //
    // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
    // a thumb key to activate a layer.  Shorter holds are treated as taps.
    //
    #ifndef THUMB_HOLDING_TIME
    #define THUMB_HOLDING_TIME 200
    #endif

    //
    // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef THUMB_REPEAT_DECAY
    #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // SPACE_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for spacebar (assigned to the right thumb's home position by default).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
    // activation for the symbol layer (if the tapped symbol key is released
    // while the thumb layer key is still held down) for quicker programming.
    //
    #ifndef SPACE_HOLDING_TYPE
    #define SPACE_HOLDING_TYPE "balanced"
    #endif

    //
    // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
    // the space thumb key to activate.  Shorter holds are treated as taps.
    //
    #ifndef SPACE_HOLDING_TIME
    #define SPACE_HOLDING_TIME 200
    #endif

    //
    // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef SPACE_REPEAT_DECAY
    #define SPACE_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // Glove80 key positions index for positional hold-tap
    // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define RIGHT_HAND_KEYS     \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72

    //
    // Home row mod-tap keys for all except index fingers
    //
    homey_left: home_row_mods_left_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_LEFT_HAND";
        flavor = HOMEY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_HOLDING_TIME>;
        #ifdef ENABLE_KEY_REPEAT
        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
        #endif
        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    homey_right: home_row_mods_right_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MODS_RIGHT_HAND";
        flavor = HOMEY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <HOMEY_HOLDING_TIME>;
        #ifdef ENABLE_KEY_REPEAT
        quick-tap-ms = <HOMEY_REPEAT_DECAY>;
        #endif
        require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    //
    // Special home row mod-tap keys for the index fingers
    //
    shift_left: home_row_shift_left_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_SHIFT_LEFT_HAND";
        flavor = SHIFT_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <SHIFT_HOLDING_TIME>;
        #ifdef ENABLE_KEY_REPEAT
        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
        #endif
        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    shift_right: home_row_shift_right_hand {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_SHIFT_RIGHT_HAND";
        flavor = SHIFT_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release; // don't wait for other mods
        tapping-term-ms = <SHIFT_HOLDING_TIME>;
        #ifdef ENABLE_KEY_REPEAT
        quick-tap-ms = <SHIFT_REPEAT_DECAY>;
        #endif
        require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    plain: plain_typing_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "PLAIN_TYPING_LAYER";
        flavor = PLAIN_HOLDING_TYPE;
        tapping-term-ms = <PLAIN_HOLDING_TIME>;
        require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };
    plain_engram_COMMA: plain_typing_layer_engram_COMMA {
        compatible = "zmk,behavior-hold-tap";
        label = "PLAIN_TYPING_LAYER_ENGRAM_COMMA";
        flavor = PLAIN_HOLDING_TYPE;
        tapping-term-ms = <PLAIN_HOLDING_TIME>;
        require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&mo>, <&engram_COMMA>;
    };
    plain_engram_DOT: plain_typing_layer_engram_DOT {
        compatible = "zmk,behavior-hold-tap";
        label = "PLAIN_TYPING_LAYER_ENGRAM_DOT";
        flavor = PLAIN_HOLDING_TYPE;
        tapping-term-ms = <PLAIN_HOLDING_TIME>;
        require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&mo>, <&engram_DOT>;
    };

    //
    // Thumb cluster hold-tap keys for Miryoku layers
    //
    thumb: thumb_layer_access {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_LAYER_ACCESS";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <THUMB_HOLDING_TIME>;
        #ifdef ENABLE_KEY_REPEAT
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
        #endif
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };
    thumb_parang_left: thumb_layer_access_parang_left {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_LAYER_ACCESS_PARANG_LEFT";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <THUMB_HOLDING_TIME>;
        #ifdef ENABLE_KEY_REPEAT
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
        #endif
        #binding-cells = <2>;
        bindings = <&mo>, <&parang_left>;
    };
    space: thumb_layer_access_spacebar {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_LAYER_ACCESS_SPACEBAR";
        flavor = SPACE_HOLDING_TYPE;
        tapping-term-ms = <SPACE_HOLDING_TIME>;
        #ifdef ENABLE_KEY_REPEAT
        quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
        #endif
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // Custom hold-taps
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // CAPPY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // cappy to type CapsLock.  Shorter holds are taps that type CapsWord.
    //
    #ifndef CAPPY_HOLDING_TIME
    #define CAPPY_HOLDING_TIME 200
    #endif

    //
    // Tap = CapsWord; Hold = CapsLock
    //
    cappy: capsword_and_capslock {
        compatible = "zmk,behavior-hold-tap";
        label = "CAPSWORD_AND_CAPSLOCK";
        flavor = "tap-preferred";
        tapping-term-ms = <CAPPY_HOLDING_TIME>;
        #binding-cells = <2>;
        bindings = <&kp>, <&caps_word>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // Custom shifted pairs
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // Shift + LEFT_PARENTHESIS = LESS_THAN
    //
    parang_left: left_parenthesis_and_less_than {
        compatible = "zmk,behavior-mod-morph";
        label = "LEFT_PARENTHESIS_AND_LESS_THAN";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp LT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //
    // Shift + RIGHT_PARENTHESIS = GREATER_THAN
    //
    parang_right: right_parenthesis_and_greater_than {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_PARENTHESIS_AND_GREATER_THAN";
        #binding-cells = <0>;
        bindings = <&kp RPAR>, <&kp GT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //
    // Custom shifted pairs for the Engram layout
    // - https://engram.dev/
    // - https://sunaku.github.io/engram-keyboard-layout.html
    //
    engram_N1: engram_shift_N1_PIPE {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N1_PIPE";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp PIPE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N2: engram_shift_N2_EQUAL {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N2_EQUAL";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp EQUAL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N3: engram_shift_N3_TILDE {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N3_TILDE";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N4: engram_shift_N4_PLUS {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N4_PLUS";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&kp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N5: engram_shift_N5_LT {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N5_LT";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp LT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N6: engram_shift_N6_GT {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N6_GT";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp GT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N7: engram_shift_N7_CARET {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N7_CARET";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp CARET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N8: engram_shift_N8_AMPS {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N8_AMPS";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp AMPS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N9: engram_shift_N9_PRCNT {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N9_PRCNT";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp PRCNT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N0: engram_shift_N0_STAR {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_N0_STAR";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp STAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_SQT: engram_shift_SQT_LPAR {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_SQT_LPAR";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp LPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_DQT: engram_shift_DQT_RPAR {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_DQT_RPAR";
        #binding-cells = <0>;
        bindings = <&kp DQT>, <&kp RPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_COMMA: engram_shift_COMMA_SEMI {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_COMMA_SEMI";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_DOT: engram_shift_DOT_COLON {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_DOT_COLON";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_QMARK: engram_shift_QMARK_EXCL {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_QMARK_EXCL";
        #binding-cells = <0>;
        bindings = <&kp QMARK>, <&kp EXCL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_HASH: engram_shift_HASH_DLLR {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_HASH_DLLR";
        #binding-cells = <0>;
        bindings = <&kp HASH>, <&kp DLLR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_AT: engram_shift_AT_GRAVE {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_AT_GRAVE";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_FSLH: engram_shift_FSLH_BSLH {
        compatible = "zmk,behavior-mod-morph";
        label = "ENGRAM_SHIFT_FSLH_BSLH";
        #binding-cells = <0>;
        bindings = <&kp FSLH>, <&kp BSLH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // ZMK global overrides
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // CapsWord - ported from Pascal Getreuer's extension for QMK
    // - https://zmk.dev/docs/behaviors/caps-word
    // - https://getreuer.info/posts/keyboards/caps-word/index.html
    //
    behavior_caps_word {
        continue-list = <
            UNDERSCORE MINUS
            BACKSPACE DELETE
            N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
        >;
    };

};

macros {

    //
    // Linux Magic System Request Key - hold this down and type REISUB
    // - https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
    // - https://github.com/manna-harbour/miryoku/discussions/259
    //
    ZMK_MACRO(linux_magic_sysrq,
        bindings
            = <&macro_press &mo 0 &kp RALT>
            , <&macro_tap &kp PRINTSCREEN>
            , <&macro_pause_for_release>
            , <&macro_release &mo 0 &kp RALT>
            ;
    )

    //////////////////////////////////////////////////////////////////////////
    //
    // Approximation of Pascal Getreuer's Select Word macro from QMK
    // - https://getreuer.info/posts/keyboards/select-word/index.html
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
    // after moving the cursor before it selects a word.  A larger delay
    // may allow the macro to move to the next word upon each invocation.
    //
    #ifndef SELECT_WORD_DELAY
    #define SELECT_WORD_DELAY 1
    #endif

    ZMK_MACRO(select_none,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
    )

    //
    // select a word (jumps to next word upon each successive invocation)
    //
    select_word: select_word {
        compatible = "zmk,behavior-mod-morph";
        label = "SELECT_WORD";
        #binding-cells = <0>;
        bindings = <&select_word_right>, <&select_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
    )
    ZMK_MACRO(select_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
    )

    //
    // extend current selection by one word
    //
    extend_word: extend_word {
        compatible = "zmk,behavior-mod-morph";
        label = "EXTEND_WORD";
        #binding-cells = <0>;
        bindings = <&extend_word_right>, <&extend_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LS(RIGHT))>;
    )
    ZMK_MACRO(extend_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LS(LEFT))>;
    )

    //
    // select current line
    //
    select_line: select_line {
        compatible = "zmk,behavior-mod-morph";
        label = "SELECT_LINE";
        #binding-cells = <0>;
        bindings = <&select_line_right>, <&select_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _HOME &kp LS(_END)>;
    )
    ZMK_MACRO(select_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _END &kp LS(_HOME)>;
    )

    //
    // extend current selection by one line
    //
    extend_line: extend_line {
        compatible = "zmk,behavior-mod-morph";
        label = "EXTEND_LINE";
        #binding-cells = <0>;
        bindings = <&extend_line_right>, <&extend_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(DOWN) &kp LS(_END)>;
    )
    ZMK_MACRO(extend_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(UP) &kp LS(_HOME)>;
    )

    //////////////////////////////////////////////////////////////////////////
    //
    // World layer - international characters
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // UNICODE_TARGET_OS defines which operating system you're targeting
    // for the UNICODE() preprocessor macro to be used on, since each OS
    // has different shortcuts for typing Unicode characters as hexcodes.
    //
    // NOTE: You may need to enable Unicode hexadecimal input in your OS:
    // - https://ladedu.com/how-to-enter-unicode-characters-on-a-mac/
    // - https://unicode-explorer.com/articles/how-to-type-unicode-characters-in-linux
    // - https://unicode-explorer.com/articles/how-to-type-unicode-characters-in-windows
    //
    #ifndef UNICODE_TARGET_OS
    #define UNICODE_TARGET_OS OPERATING_SYSTEM
    #endif

    //
    // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
    // between keystrokes while inputting the Unicode codepoint shortcut.
    //
    #ifndef UNICODE_TAP_DELAY
    #define UNICODE_TAP_DELAY 1
    #endif

    //
    // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
    // between emitting Unicode codepoints in multi-codepoint characters.
    //
    #ifndef UNICODE_SEQ_DELAY
    #define UNICODE_SEQ_DELAY 10
    #endif

    #define UNICODE(name, ...) \
        ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
        )

    //
    // NOTE: edit the emoji.yaml file and run `rake` to generate this:
    //

    //
    // codepoints
    //
    UNICODE(world_degree_sign, /* ° */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp B &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_section_sign, /* § */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp A &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_paragraph_sign, /* ¶ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp B &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_o_ordinal, /* º */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp B &kp A &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp A>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp A>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_a_ordinal, /* ª */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp A &kp A &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp A>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp A>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_exclaim_left, /* ¡ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp A &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_question_left, /* ¿ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp B &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp F>, <&macro_release &kp LALT>
      #endif
    )

    //
    // characters
    //
    UNICODE(world_c_cedilla_lower, /* ç */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_c_cedilla_upper, /* Ç */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    world_c_cedilla: world_c_cedilla {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_C_CEDILLA";
        #binding-cells = <0>;
        bindings = <&world_c_cedilla_lower>, <&world_c_cedilla_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_acute_lower, /* í */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp D>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_i_acute_upper, /* Í */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp D>, <&macro_release &kp LALT>
      #endif
    )
    world_i_acute: world_i_acute {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_I_ACUTE";
        #binding-cells = <0>;
        bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_diaeresis_lower, /* ï */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_i_diaeresis_upper, /* Ï */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp F>, <&macro_release &kp LALT>
      #endif
    )
    world_i_diaeresis: world_i_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_I_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_circumflex_lower, /* î */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp E &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp E>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp E>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_i_circumflex_upper, /* Î */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp E &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp E>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp E>, <&macro_release &kp LALT>
      #endif
    )
    world_i_circumflex: world_i_circumflex {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_I_CIRCUMFLEX";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_i_grave_lower, /* ì */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_i_grave_upper, /* Ì */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp C>, <&macro_release &kp LALT>
      #endif
    )
    world_i_grave: world_i_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_I_GRAVE";
        #binding-cells = <0>;
        bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_acute_lower, /* é */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_e_acute_upper, /* É */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    world_e_acute: world_e_acute {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_ACUTE";
        #binding-cells = <0>;
        bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_diaeresis_lower, /* ë */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp B>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_e_diaeresis_upper, /* Ë */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp B>, <&macro_release &kp LALT>
      #endif
    )
    world_e_diaeresis: world_e_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_circumflex_lower, /* ê */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp A &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp A>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp A>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_e_circumflex_upper, /* Ê */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp A &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp A>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp A>, <&macro_release &kp LALT>
      #endif
    )
    world_e_circumflex: world_e_circumflex {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_CIRCUMFLEX";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_grave_lower, /* è */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_e_grave_upper, /* È */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    world_e_grave: world_e_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_GRAVE";
        #binding-cells = <0>;
        bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_e_ae_lower, /* æ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_e_ae_upper, /* Æ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    world_e_ae: world_e_ae {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_AE";
        #binding-cells = <0>;
        bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_acute_lower, /* á */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_a_acute_upper, /* Á */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    world_a_acute: world_a_acute {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_ACUTE";
        #binding-cells = <0>;
        bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_diaeresis_lower, /* ä */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_a_diaeresis_upper, /* Ä */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    world_a_diaeresis: world_a_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_circumflex_lower, /* â */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_a_circumflex_upper, /* Â */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    world_a_circumflex: world_a_circumflex {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_CIRCUMFLEX";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_grave_lower, /* à */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_a_grave_upper, /* À */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    world_a_grave: world_a_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_GRAVE";
        #binding-cells = <0>;
        bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_tilde_lower, /* ã */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_a_tilde_upper, /* Ã */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    world_a_tilde: world_a_tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_TILDE";
        #binding-cells = <0>;
        bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_a_ring_lower, /* å */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp E &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp E &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp E &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_a_ring_upper, /* Å */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp C &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp C &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp C &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    world_a_ring: world_a_ring {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_RING";
        #binding-cells = <0>;
        bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_y_acute_lower, /* ý */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp D>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_y_acute_upper, /* Ý */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp D>, <&macro_release &kp LALT>
      #endif
    )
    world_y_acute: world_y_acute {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_Y_ACUTE";
        #binding-cells = <0>;
        bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_y_diaeresis_lower, /* ÿ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_y_diaeresis_upper, /* Ÿ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp N7 &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N1 &kp N7 &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp KP_N7 &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    world_y_diaeresis: world_y_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_Y_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_acute_lower, /* ó */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_o_acute_upper, /* Ó */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    world_o_acute: world_o_acute {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_ACUTE";
        #binding-cells = <0>;
        bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_diaeresis_lower, /* ö */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_o_diaeresis_upper, /* Ö */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    world_o_diaeresis: world_o_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_circumflex_lower, /* ô */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_o_circumflex_upper, /* Ô */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    world_o_circumflex: world_o_circumflex {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_CIRCUMFLEX";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_grave_lower, /* ò */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_o_grave_upper, /* Ò */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    world_o_grave: world_o_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_GRAVE";
        #binding-cells = <0>;
        bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_tilde_lower, /* õ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_o_tilde_upper, /* Õ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    world_o_tilde: world_o_tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_TILDE";
        #binding-cells = <0>;
        bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_o_slash_lower, /* ø */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_o_slash_upper, /* Ø */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    world_o_slash: world_o_slash {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_SLASH";
        #binding-cells = <0>;
        bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_acute_lower, /* ú */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp A &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp A>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp A>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_u_acute_upper, /* Ú */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp A &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp A>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp A>, <&macro_release &kp LALT>
      #endif
    )
    world_u_acute: world_u_acute {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_ACUTE";
        #binding-cells = <0>;
        bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_diaeresis_lower, /* ü */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_u_diaeresis_upper, /* Ü */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp C>, <&macro_release &kp LALT>
      #endif
    )
    world_u_diaeresis: world_u_diaeresis {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_DIAERESIS";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_circumflex_lower, /* û */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp B>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_u_circumflex_upper, /* Û */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp B>, <&macro_release &kp LALT>
      #endif
    )
    world_u_circumflex: world_u_circumflex {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_CIRCUMFLEX";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_u_grave_lower, /* ù */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_u_grave_upper, /* Ù */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    world_u_grave: world_u_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_GRAVE";
        #binding-cells = <0>;
        bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_n_tilde_lower, /* ñ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp F &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_n_tilde_upper, /* Ñ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp D &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp D &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp D &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    world_n_tilde: world_n_tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_N_TILDE";
        #binding-cells = <0>;
        bindings = <&world_n_tilde_lower>, <&world_n_tilde_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_plain_lower, /* ' */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N2 &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_quotes_plain_upper, /* " */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N2 &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    world_quotes_plain: world_quotes_plain {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_PLAIN";
        #binding-cells = <0>;
        bindings = <&world_quotes_plain_lower>, <&world_quotes_plain_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_grave_lower, /* ` */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N6 &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp N6 &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N6 &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_quotes_grave_upper, /* ´ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp B &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    world_quotes_grave: world_quotes_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_GRAVE";
        #binding-cells = <0>;
        bindings = <&world_quotes_grave_lower>, <&world_quotes_grave_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_angle_lower, /* « */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp A &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp A &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp A &kp B>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_quotes_angle_upper, /* » */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp B &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N0 &kp N0 &kp B &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp B &kp B>, <&macro_release &kp LALT>
      #endif
    )
    world_quotes_angle: world_quotes_angle {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_ANGLE";
        #binding-cells = <0>;
        bindings = <&world_quotes_angle_lower>, <&world_quotes_angle_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_curly1_lower, /* ‘ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_quotes_curly1_upper, /* ’ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    world_quotes_curly1: world_quotes_curly1 {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_CURLY1";
        #binding-cells = <0>;
        bindings = <&world_quotes_curly1_lower>, <&world_quotes_curly1_upper>;
        mods = <MOD_LSFT>;
    };
    UNICODE(world_quotes_curly2_lower, /* “ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(world_quotes_curly2_upper, /* ” */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N0 &kp N1 &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N1 &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N1 &kp D>, <&macro_release &kp LALT>
      #endif
    )
    world_quotes_curly2: world_quotes_curly2 {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_CURLY2";
        #binding-cells = <0>;
        bindings = <&world_quotes_curly2_lower>, <&world_quotes_curly2_upper>;
        mods = <MOD_LSFT>;
    };

    //
    // transforms
    //
    world_i_base: world_i_base {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_I_BASE";
        #binding-cells = <0>;
        bindings = <&world_i_acute>, <&world_i_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_i_LCTL: world_i_LCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_I_LCTL";
        #binding-cells = <0>;
        bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_i_RCTL: world_i_RCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_I_RCTL";
        #binding-cells = <0>;
        bindings = <&world_i_circumflex>, <&world_i_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_e_base: world_e_base {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_BASE";
        #binding-cells = <0>;
        bindings = <&world_e_acute>, <&world_e_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_e_RALT: world_e_RALT {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_RALT";
        #binding-cells = <0>;
        bindings = <&world_e_ae>, <&world_e_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_e_LCTL: world_e_LCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_LCTL";
        #binding-cells = <0>;
        bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_e_RCTL: world_e_RCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_E_RCTL";
        #binding-cells = <0>;
        bindings = <&world_e_circumflex>, <&world_e_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_a_base: world_a_base {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_BASE";
        #binding-cells = <0>;
        bindings = <&world_a_acute>, <&world_a_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_LALT: world_a_LALT {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_LALT";
        #binding-cells = <0>;
        bindings = <&world_a_tilde>, <&world_a_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_RALT: world_a_RALT {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_RALT";
        #binding-cells = <0>;
        bindings = <&world_a_ring>, <&world_a_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_a_LCTL: world_a_LCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_LCTL";
        #binding-cells = <0>;
        bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_a_RCTL: world_a_RCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_A_RCTL";
        #binding-cells = <0>;
        bindings = <&world_a_circumflex>, <&world_a_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_y_base: world_y_base {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_Y_BASE";
        #binding-cells = <0>;
        bindings = <&world_y_acute>, <&world_y_diaeresis>;
        mods = <(MOD_LCTL)>;
    };
    world_o_base: world_o_base {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_BASE";
        #binding-cells = <0>;
        bindings = <&world_o_acute>, <&world_o_LALT>;
        mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_LALT: world_o_LALT {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_LALT";
        #binding-cells = <0>;
        bindings = <&world_o_tilde>, <&world_o_RALT>;
        mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_RALT: world_o_RALT {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_RALT";
        #binding-cells = <0>;
        bindings = <&world_o_slash>, <&world_o_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_o_LCTL: world_o_LCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_LCTL";
        #binding-cells = <0>;
        bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_o_RCTL: world_o_RCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_O_RCTL";
        #binding-cells = <0>;
        bindings = <&world_o_circumflex>, <&world_o_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_u_base: world_u_base {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_BASE";
        #binding-cells = <0>;
        bindings = <&world_u_acute>, <&world_u_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_u_LCTL: world_u_LCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_LCTL";
        #binding-cells = <0>;
        bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_u_RCTL: world_u_RCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_U_RCTL";
        #binding-cells = <0>;
        bindings = <&world_u_circumflex>, <&world_u_grave>;
        mods = <(MOD_RSFT)>;
    };
    world_quotes_base: world_quotes_base {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_BASE";
        #binding-cells = <0>;
        bindings = <&world_quotes_plain>, <&world_quotes_LALT>;
        mods = <(MOD_LALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_LALT: world_quotes_LALT {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_LALT";
        #binding-cells = <0>;
        bindings = <&world_quotes_angle>, <&world_quotes_LCTL>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_LCTL: world_quotes_LCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_LCTL";
        #binding-cells = <0>;
        bindings = <&world_quotes_curly2>, <&world_quotes_RCTL>;
        mods = <(MOD_RCTL|MOD_RSFT)>;
    };
    world_quotes_RCTL: world_quotes_RCTL {
        compatible = "zmk,behavior-mod-morph";
        label = "WORLD_QUOTES_RCTL";
        #binding-cells = <0>;
        bindings = <&world_quotes_curly1>, <&world_quotes_grave>;
        mods = <(MOD_RSFT)>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // Emoji layer - modern age pictograms
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // EMOJI_GENDER_SIGN_PRESET defines an Emoji gender sign for use as a
    // convenient inward-rolling shortcut on the home row of the layer.
    //
    #ifndef EMOJI_GENDER_SIGN_PRESET
    //#define EMOJI_GENDER_SIGN_PRESET 0 // neutral
    #define EMOJI_GENDER_SIGN_PRESET 1 // male
    //#define EMOJI_GENDER_SIGN_PRESET 2 // female
    #endif

    //
    // EMOJI_SKIN_TONE_PRESET defines an Emoji skin tone for use as a
    // convenient inward-rolling shortcut on the home row of the layer.
    //
    #ifndef EMOJI_SKIN_TONE_PRESET
    //#define EMOJI_SKIN_TONE_PRESET 0 // neutral
    //#define EMOJI_SKIN_TONE_PRESET 1 // light_skin_tone
    //#define EMOJI_SKIN_TONE_PRESET 2 // medium_light_skin_tone
    //#define EMOJI_SKIN_TONE_PRESET 3 // medium_skin_tone
    #define EMOJI_SKIN_TONE_PRESET 4 // medium_dark_skin_tone
    //#define EMOJI_SKIN_TONE_PRESET 5 // dark_skin_tone
    #endif

    //
    // EMOJI_HAIR_STYLE_PRESET defines an Emoji hair style for use as a
    // convenient inward-rolling shortcut on the home row of the layer.
    //
    #ifndef EMOJI_HAIR_STYLE_PRESET
    //#define EMOJI_HAIR_STYLE_PRESET 0 // neutral
    //#define EMOJI_HAIR_STYLE_PRESET 1 // bald
    //#define EMOJI_HAIR_STYLE_PRESET 2 // red_hair
    //#define EMOJI_HAIR_STYLE_PRESET 3 // curly_hair
    #define EMOJI_HAIR_STYLE_PRESET 4 // white_hair
    #endif

    //
    // NOTE: edit the emoji.yaml file and run `rake` to generate this:
    //
    UNICODE(emoji_zwj, /* ‍ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N0 &kp N0 &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N0 &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N0 &kp D>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_male_sign, /* ♂️ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N6 &kp N4 &kp N2 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N4 &kp N2>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N4 &kp KP_N2>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_female_sign, /* ♀️ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N6 &kp N4 &kp N0 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N4 &kp N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N4 &kp KP_N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_right_arrow, /* ➡️ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N7 &kp A &kp N1 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp A &kp N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp A &kp KP_N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_left_arrow, /* ⬅️ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp B &kp N0 &kp N5 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp B &kp N0 &kp N5>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp B &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_light_skin_tone, /* 🏻 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp B>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_medium_light_skin_tone, /* 🏼 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_medium_skin_tone, /* 🏽 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp D>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_medium_dark_skin_tone, /* 🏾 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp E &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp E>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp E>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_dark_skin_tone, /* 🏿 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp F &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp F &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp F &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_baby_bottle, /* 🍼 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N7 &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N7 &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N7 &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_baby, /* 👶 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_boy, /* 👦 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_girl, /* 👧 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_man, /* 👨 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_woman, /* 👩 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N6 &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N6 &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N6 &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_old_man, /* 👴 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_old_woman, /* 👵 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N7 &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N7 &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N7 &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_white_hair, /* 🦳 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_curly_hair, /* 🦱 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_red_hair, /* 🦰 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_bald, /* 🦲 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp B &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp B &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp B &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_new_moon, /* 🌑 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_waxing_crescent_moon, /* 🌒 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_first_quarter_moon, /* 🌓 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_waxing_gibbous_moon, /* 🌔 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_full_moon, /* 🌕 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N1 &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N1 &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N1 &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_tada, /* 🎉 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N3 &kp N8 &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N3 &kp N8 &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N3 &kp KP_N8 &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_fire, /* 🔥 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N5 &kp N2 &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N5 &kp N2 &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N5 &kp KP_N2 &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_heart, /* ️❤️ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp N2 &kp N7 &kp N6 &kp N4 &kp ENTER>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N6 &kp N4>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N6 &kp KP_N4>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_muscle, /* 💪 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp A &kp A &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp A &kp A>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp A &kp A>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_person_climbing, /* 🧗 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp D &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp D &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp D &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_rocket, /* 🚀 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N8 &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N8 &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N8 &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_sunglasses, /* 😎 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp E &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp E>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp E>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_star_struck, /* 🤩 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N2 &kp N9 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N2 &kp N9>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N2 &kp KP_N9>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_joy, /* 😂 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp N2 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp N2>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp KP_N2>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_cold_sweat, /* 😰 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N3 &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N3 &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N3 &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_scream, /* 😱 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N3 &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N3 &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N3 &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_exploding_head, /* 🤯 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N2 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N2 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N2 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_snap_fingers, /* 🫰 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp A &kp F &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp A &kp F &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp A &kp F &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_ok_hand, /* 👌 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N4 &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N4 &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_pray, /* 🙏 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_sweat_smile, /* 😅 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N0 &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N0 &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_disappointed, /* 😞 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N1 &kp E &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N1 &kp E>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N1 &kp E>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_thinking, /* 🤔 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N1 &kp N4 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N1 &kp N4>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N1 &kp KP_N4>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_person_tipping_hand, /* 💁 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N8 &kp N1 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N8 &kp N1>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N8 &kp KP_N1>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_person_gesturing_ok, /* 🙆 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N6 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N6>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N6>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_person_bowing, /* 🙇 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_person_raising_hand, /* 🙋 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp B &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp B>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp B>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_person_gesturing_no, /* 🙅 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_person_shrugging, /* 🤷 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N3 &kp N7 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N3 &kp N7>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N3 &kp KP_N7>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_checkoff, /* ✅ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N7 &kp N0 &kp N5 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N0 &kp N5>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N0 &kp KP_N5>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_100, /* 💯 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp A &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp A &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp A &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_warning, /* ⚠️ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N6 &kp A &kp N0 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp A &kp N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp A &kp KP_N0>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_x, /* ❌ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N7 &kp N4 &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N4 &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_question, /* ❓ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N7 &kp N5 &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N5 &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N5 &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_astronaut, /* 🧑‍🚀 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp D &kp N1 &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp N2 &kp N0 &kp N0 &kp D &kp ENTER>, <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N8 &kp N0 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp D &kp N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N0 &kp N0 &kp D>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N8 &kp N0>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp D &kp KP_N1>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N0 &kp KP_N0 &kp D>, <&macro_release &kp LALT>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N8 &kp KP_N0>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_nerd, /* 🤓 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N9 &kp N1 &kp N3 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N9 &kp N1 &kp N3>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N9 &kp KP_N1 &kp KP_N3>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_sparkles, /* ✨ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N7 &kp N2 &kp N8 &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N7 &kp N2 &kp N8>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N7 &kp KP_N2 &kp KP_N8>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_raised_hands, /* 🙌 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N6 &kp N4 &kp C &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N6 &kp N4 &kp C>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N6 &kp KP_N4 &kp C>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_point_up, /* ☝️ */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N2 &kp N6 &kp N1 &kp D &kp ENTER>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&kp LC(LS(U)) &kp F &kp E &kp N0 &kp F &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N2 &kp N6 &kp N1 &kp D>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp F &kp E &kp N0 &kp F>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N2 &kp KP_N6 &kp KP_N1 &kp D>, <&macro_release &kp LALT>, <&macro_wait_time UNICODE_SEQ_DELAY>, <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp F &kp E &kp KP_N0 &kp F>, <&macro_release &kp LALT>
      #endif
    )
    UNICODE(emoji_thumbs_up, /* 👍 */
      #if UNICODE_TARGET_OS == 1
        <&kp LC(LS(U)) &kp N1 &kp F &kp N4 &kp N4 &kp D &kp ENTER>
      #elif UNICODE_TARGET_OS == 2
        <&macro_press &kp LALT>, <&macro_tap &kp N1 &kp F &kp N4 &kp N4 &kp D>, <&macro_release &kp LALT>
      #elif UNICODE_TARGET_OS == 3
        <&macro_press &kp LALT>, <&macro_tap &kp KP_PLUS &kp KP_N1 &kp F &kp KP_N4 &kp KP_N4 &kp D>, <&macro_release &kp LALT>
      #endif
    )
};
/*HACK*/};
#if EMOJI_GENDER_SIGN_PRESET == 0
  emoji_gender_sign_preset: &none {};
#elif EMOJI_GENDER_SIGN_PRESET == 1
  emoji_gender_sign_preset: &emoji_male_sign {};
#elif EMOJI_GENDER_SIGN_PRESET == 2
  emoji_gender_sign_preset: &emoji_female_sign {};
#endif

#if EMOJI_SKIN_TONE_PRESET == 0
  emoji_skin_tone_preset: &none {};
#elif EMOJI_SKIN_TONE_PRESET == 1
  emoji_skin_tone_preset: &emoji_light_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 2
  emoji_skin_tone_preset: &emoji_medium_light_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 3
  emoji_skin_tone_preset: &emoji_medium_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 4
  emoji_skin_tone_preset: &emoji_medium_dark_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 5
  emoji_skin_tone_preset: &emoji_dark_skin_tone {};
#endif

#if EMOJI_HAIR_STYLE_PRESET == 0
  emoji_hair_style_preset: &none {};
#elif EMOJI_HAIR_STYLE_PRESET == 1
  emoji_hair_style_preset: &emoji_bald {};
#elif EMOJI_HAIR_STYLE_PRESET == 2
  emoji_hair_style_preset: &emoji_red_hair {};
#elif EMOJI_HAIR_STYLE_PRESET == 3
  emoji_hair_style_preset: &emoji_curly_hair {};
#elif EMOJI_HAIR_STYLE_PRESET == 4
  emoji_hair_style_preset: &emoji_white_hair {};
#endif
/*HACK*//{

//////////////////////////////////////////////////////////////////////////
//
// Mouse keys (control mouse via keyboard) -- requires PR23 beta firmware:
// select "community.pr23.mouse-keys" from the drop-down menu located at
// Glove80 Layout Editor > Settings > Advanced Settings > Firmware Version
//
// - https://github.com/moergo-sc/zmk/pull/23
// - https://gist.github.com/krissen/dd27082e7ab0575619c7a31f4d2ec7ae
// - https://github.com/zmkfirmware/zmk/compare/main...urob:zmk:mouse-3.2
//
//////////////////////////////////////////////////////////////////////////

//
// ENABLE_MOUSE_KEYS activates support for mouse keys if defined; otherwise
// mouse keys are deactivated (they're transformed into no-ops) by default.
// To use this feature, uncomment the following line (remove leading "//").
//
//#define ENABLE_MOUSE_KEYS // requires PR23 beta firmware: see note above

//
// MOUSE_MOTION_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_MOTION_DELAY
#define MOUSE_MOTION_DELAY 0
#endif

//
// MOUSE_MOTION_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_MOTION_ACCELERATION_EXPONENT
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1
#endif

//
// MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_MOTION_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//
#ifndef MOUSE_MOTION_MAXIMUM_SPEED
#define MOUSE_MOTION_MAXIMUM_SPEED 600
#endif

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_SCROLL_MAXIMUM_SPEED defines how quickly the mouse wheel can scroll.
//
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 10
#endif
/*HACK*/};
#ifdef ENABLE_MOUSE_KEYS
    // ==== MOUSE-KEY <section begins> ====
    #define ZMK_MOUSE_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
    #define ZMK_MOUSE_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED
    #include <dt-bindings/zmk/mouse.h>
    &mmv {
      delay-ms = <MOUSE_MOTION_DELAY>;
      acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
      time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
    };
    &msc {
      delay-ms = <MOUSE_SCROLL_DELAY>;
      acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
      time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
    };
    // ==== MOUSE-KEY <section ends> =====
#else
    #define mkp none
    #define mmv none
    #define msc none
    #define LCLK
    #define MCLK
    #define RCLK
    #define MB1
    #define MB2
    #define MB3
    #define MB4
    #define MB5
    #define MB6
    #define MB7
    #define MB8
    #define MOVE_UP
    #define MOVE_DOWN
    #define MOVE_LEFT
    #define MOVE_RIGHT
    #define SCRL_UP
    #define SCRL_DOWN
    #define SCRL_LEFT
    #define SCRL_RIGHT
#endif
/*HACK*//{
